<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL基础</title>
    <url>/2023/12/06/DataBase_MySQL/</url>
    <content><![CDATA[<h1 id="Mysql基础篇"><a href="#Mysql基础篇" class="headerlink" title="Mysql基础篇"></a>Mysql基础篇</h1><h2 id="一、数据库相关概念"><a href="#一、数据库相关概念" class="headerlink" title="一、数据库相关概念"></a>一、数据库相关概念</h2><ol>
<li>持久化：把数据保存到可掉电存储设备中以供日后使用</li>
<li>DB：数据库，即存储数据的仓库，保存了一系列有组织的数据</li>
<li>DBMS：数据库管理系统，是一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。</li>
<li>SQL：结构化查询语言，专门用来与数据库通信的语言</li>
<li>MySQL是关系型数据库管理系统</li>
</ol>
<h2 id="二、RDBMS与非RDBMS"><a href="#二、RDBMS与非RDBMS" class="headerlink" title="二、RDBMS与非RDBMS"></a>二、RDBMS与非RDBMS</h2><ol>
<li><p>RDBMS：关系型数据库，实质就是把复杂的数据结构归结为简单的二元关系（即二维表格形式），关系型数据库以行和列的形式存储数据</p>
<p>优势：可以使用SQL语句进行复杂的查询，同时也支持事务，提高了安全性</p>
</li>
<li><p>非RDBMS：非关系型数据库，基于键值对存储数据，不需要经过SQL层解析，性能非常高。</p>
</li>
</ol>
<h2 id="三、关系型数据库设计规则"><a href="#三、关系型数据库设计规则" class="headerlink" title="三、关系型数据库设计规则"></a>三、关系型数据库设计规则</h2><h3 id="3-1表，记录，字段"><a href="#3-1表，记录，字段" class="headerlink" title="3.1表，记录，字段"></a>3.1表，记录，字段</h3><ul>
<li>E-R(entity-relationshil，实体-联系)模型中三个主要概念：实体集、属性、联系集</li>
<li>一个实体集对应一个表。一个实体对应数据库表中的一行，即一条记录。一个属性对应数据库表中的一列，即字段</li>
</ul>
<p>ORM(Object Relationl Mapping)思想:对象关系映射</p>
<p>数据库中一个表  —–  java中的一个类</p>
<p>表中一条数据     —–  类中一个对象</p>
<p>表中一列            —–  类中一个字段、属性</p>
<h3 id="3-2-表的关联关系"><a href="#3-2-表的关联关系" class="headerlink" title="3.2 表的关联关系"></a>3.2 表的关联关系</h3><p>四种关系：一对一、一对多、多对多、自我引用</p>
<ol>
<li><p>一对一关系</p>
<p>举例：设计学生表：学号、姓名、手机号码等</p>
<p>拆分为两个表，两个表的记录时一一对应的关系</p>
<p>两种建表原则：外键用于保持数据的一致性</p>
<ul>
<li>外键唯一：主表的主键和从表的外键，形成主外表关系，外键唯一</li>
<li>外键是主键：主表的主键和从表的主键，形成主外键的关系</li>
</ul>
</li>
<li><p>一对多关系</p>
<p>一对多建表原则：在从表(多方)创建一个字段，字段作为外键指向主表的主键</p>
<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/%E4%B8%80%E5%AF%B9%E5%A4%9A.png"></p>
</li>
<li><p>多对多的关系</p>
<p>要表示多对多的关系，必须创建第三个表，该表通常称为联接表，他将多对多的关系划分为两个一对多的关系，这两个表的主键都插入到第三个表中</p>
<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/%E5%A4%9A%E5%AF%B9%E5%A4%9A.png"></p>
</li>
<li><p>自我引用</p>
<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/%E8%87%AA%E6%88%91%E5%BC%95%E7%94%A8.png"></p>
</li>
</ol>
<h2 id="四、基本的Select语句"><a href="#四、基本的Select语句" class="headerlink" title="四、基本的Select语句"></a>四、基本的Select语句</h2><h3 id="1、SQL分类"><a href="#1、SQL分类" class="headerlink" title="1、SQL分类"></a>1、SQL分类</h3><ul>
<li>DDL(Data Definition Languages)：数据定义语言，这些语句定义数据库、表、视图、索引，可以用来创建、删除、修改数据库和数据表的结构，主要关键字create、drop、alter</li>
<li>DML(Data Manipulation Language)：数据操作语言，用于增删改查，主要关键字insert、delete、update、select</li>
<li>DCL(Data Control Language)：数据控制语言，用于定义数据库、表、字段、用户的访问权限和安全级别，关键字grant、revoke、commit</li>
</ul>
<h3 id="2、SQL语言规范"><a href="#2、SQL语言规范" class="headerlink" title="2、SQL语言规范"></a>2、SQL语言规范</h3><ul>
<li>每条命令以；或  \g 或 \G 结束</li>
<li>关键字不可缩写和分行</li>
<li>标点符号成对出现</li>
</ul>
<p>注意：MySQL在windows环境下大小写不敏感，在Linux环境下大小写敏感</p>
<p>统一书写规范：</p>
<ul>
<li>数据库名、表名、表别名、字段名、字段别名等都小写</li>
<li>SQL关键字、函数名、绑定变量等都大写</li>
<li>当字段名与关键字名冲突时(尽量避免)，使用着重号引起来  &#96;</li>
</ul>
<p>命名规则：</p>
<ul>
<li>只能包含A-Z，a - z, 0 - 9，_共63个字符</li>
<li>数据库名、表名、字段名等对象名中间不要包含空格</li>
</ul>
<h3 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h3><p>单行注释：#注释文字(MySQL特有的方式) </p>
<p>单行注释：– 注释文字(–后面必须包含一个空格。) </p>
<p>多行注释：&#x2F;* 注释文字 *&#x2F; </p>
<h3 id="4、Select语法"><a href="#4、Select语法" class="headerlink" title="4、Select语法"></a>4、Select语法</h3><h4 id="4-1-Select"><a href="#4-1-Select" class="headerlink" title="4.1 Select"></a>4.1 Select</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>; #没有任何子句 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">9</span><span class="operator">/</span><span class="number">2</span>; #没有任何子句</span><br></pre></td></tr></table></figure>

<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/1.png"></p>
<h4 id="4-2-SELECT-…-FROM"><a href="#4-2-SELECT-…-FROM" class="headerlink" title="4.2 SELECT …. FROM"></a>4.2 SELECT …. FROM</h4><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 标识选择哪些列 </span><br><span class="line"><span class="keyword">FROM</span> 标识从哪个表中选择 </span><br></pre></td></tr></table></figure>
</li>
<li><p>选择全部列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br></pre></td></tr></table></figure>

<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/2.png"></p>
</li>
<li><p>选择特定列</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, location_id </span><br><span class="line"><span class="keyword">FROM</span> departments;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-2-列的别名"><a href="#4-2-列的别名" class="headerlink" title="4.2 列的别名"></a>4.2 列的别名</h4><ol>
<li><p>作用：重命名一个列便于计算</p>
</li>
<li><p>实现方式：紧跟列名，或者在列名和别名之间加入关键字AS，AS可以省略。别名使用双引号，可以在别名中包含空格或特殊字符并区分大小写</p>
</li>
<li><p>举例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> name, commission_pct comm </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/3.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name &quot;Name&quot;, salary<span class="operator">*</span><span class="number">12</span> &quot;Annual Salary&quot; </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/4.png"></p>
</li>
</ol>
<h4 id="4-3-去除重复行"><a href="#4-3-去除重复行" class="headerlink" title="4.3 去除重复行"></a>4.3 去除重复行</h4><p>默认情况下，查询会返回全部行，包括重复行</p>
<p>在SELECT语句中使用关键字DISTINCE去除重复行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>针对于：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id,salary </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>有两点注意：</p>
<ol>
<li>DISTINCT 需要放到所有列名的前面，如果写成 SELECT salary, DISTINCT department_id FROM employees 会报错</li>
<li>DISTINCT 其实是对后面所有列名的组合进行去重</li>
</ol>
<h4 id="4-4-空值参与运算"><a href="#4-4-空值参与运算" class="headerlink" title="4.4 空值参与运算"></a>4.4 空值参与运算</h4><p>所有运算符或列值遇到null值，运算的结果都为null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,salary,commission_pct, <span class="number">12</span> <span class="operator">*</span> salary <span class="operator">*</span> (<span class="number">1</span> <span class="operator">+</span> commission_pct) &quot;annual_sal&quot; </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>注意，在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</p>
<h4 id="4-5着重号"><a href="#4-5着重号" class="headerlink" title="4.5着重号"></a>4.5着重号</h4><p>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，在SQL语句中使用一对&#96;&#96;（着重号）引起来。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `<span class="keyword">ORDER</span>`</span><br></pre></td></tr></table></figure>

<h4 id="4-6-查询常数"><a href="#4-6-查询常数" class="headerlink" title="4.6 查询常数"></a>4.6 查询常数</h4><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</p>
<p>比如说，我们想对 employees 数据表中的员工姓名进行查询，同时增加一列字段 corporation ，这个字段固定值为“尚硅谷”，可以这样写：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;尚硅谷&#x27;</span> <span class="keyword">as</span> corporation, last_name </span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<p>则列名为corporation，里面的值全为尚硅谷</p>
<h4 id="4-7-显示表结构"><a href="#4-7-显示表结构" class="headerlink" title="4.7 显示表结构"></a>4.7 显示表结构</h4><p>使用DESCRIBE 或 DESC 命令，表示表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESCRIBE</span> employees; </span><br><span class="line">或</span><br><span class="line"><span class="keyword">DESC</span> employees;</span><br></pre></td></tr></table></figure>

<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/5.png"></p>
<p>其中，各个字段的含义分别解释如下：</p>
<p>Field：表示字段名称。</p>
<p>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</p>
<p>Null：表示该列是否可以存储NULL值。</p>
<p>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一</p>
<p>部分；MUL表示在列中某个给定值允许出现多次。</p>
<p>Default：表示该列是否有默认值，如果有，那么值是多少。</p>
<p>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</p>
<h3 id="5-过滤数据"><a href="#5-过滤数据" class="headerlink" title="5. 过滤数据"></a>5. 过滤数据</h3><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span> </span><br><span class="line"><span class="keyword">FROM</span> 表名 </span><br><span class="line"><span class="keyword">WHERE</span> 过滤条件</span><br></pre></td></tr></table></figure>

<ul>
<li>使用where子句，将不满足条件的行过滤掉</li>
<li><strong>where子句紧随from子句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, job_id, department_id </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="operator">=</span> <span class="number">90</span> ;</span><br></pre></td></tr></table></figure>

<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/6.png"></p>
<h2 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h2><h3 id="1、算术运算符"><a href="#1、算术运算符" class="headerlink" title="1、算术运算符"></a>1、算术运算符</h3><p>+，-，*，&#x2F;(或DIV)，%(MOD)</p>
<ol>
<li><p>对于加减</p>
<p>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</p>
<p>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</p>
<p>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）</p>
</li>
<li><p>对于乘除</p>
<p>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</p>
<p>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；</p>
<p>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</p>
</li>
</ol>
<h3 id="2、比较运算符"><a href="#2、比较运算符" class="headerlink" title="2、比较运算符"></a>2、比较运算符</h3><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，<strong>比较的结果为真则返回1，比较的结果为假则返回0</strong>，其他情况则返回NULL。</p>
<p>&#x3D;，&lt;&#x3D;&gt;(安全等于)，&lt;&gt;(!&#x3D;)(不等于)，&lt;，&lt;&#x3D;，&gt;，&gt;&#x3D;</p>
<ol>
<li><p>&#x3D;</p>
<ul>
<li><p>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的</p>
<p>是每个字符串中字符的ANSI编码是否相等。</p>
</li>
<li><p>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</p>
</li>
<li><p><strong>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</strong></p>
</li>
</ul>
</li>
<li><p>&lt;&#x3D;&gt;</p>
<p>安全等于运算符（&lt;&#x3D;&gt;）与等于运算符（&#x3D;）的作用是相似的， 唯一的区别 是‘&lt;&#x3D;&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。</p>
</li>
<li><p>不等于运算符</p>
<p>不等于运算符（&lt;&gt;和!&#x3D;）用于判断两边的数字、字符串或者表达式的值是否不相等，如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，或两边都为NULL，则结果为NULL。</p>
</li>
</ol>
<h3 id="3、非符号类型运算符"><a href="#3、非符号类型运算符" class="headerlink" title="3、非符号类型运算符"></a>3、非符号类型运算符</h3><p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/9.png"></p>
<p>对于LIKE运算符</p>
<p>LIKE运算符通常使用如下通配符：</p>
<p><strong>“%”：匹配0个或多个字符。</strong> </p>
<p><strong>“_”：只能匹配一个字符。</strong></p>
<p>比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> first_name <span class="keyword">LIKE</span> <span class="string">&#x27;S%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>回避特殊符号的：<strong>使用转义符</strong>。\就是转义字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id </span><br><span class="line"><span class="keyword">FROM</span> jobs </span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> ‘IT\_<span class="operator">%</span>‘;</span><br></pre></td></tr></table></figure>

<p>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_id </span><br><span class="line"><span class="keyword">FROM</span> jobs </span><br><span class="line"><span class="keyword">WHERE</span> job_id <span class="keyword">LIKE</span> ‘IT$_<span class="operator">%</span>‘ <span class="keyword">escape</span> ‘$‘;</span><br><span class="line">#用<span class="keyword">escape</span>标注 $就是转义字符</span><br></pre></td></tr></table></figure>

<h3 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h3><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/10.png"></p>
<p><strong>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</strong></p>
<p>当有null的时候，他们的返回值全是null</p>
<h3 id="5、位运算符"><a href="#5、位运算符" class="headerlink" title="5、位运算符"></a>5、位运算符</h3><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p>
<p>&amp;，|，^，~(取反），&gt;&gt;，&lt;&lt;</p>
<p>按位右移运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。</p>
<h2 id="六、排序与分页"><a href="#六、排序与分页" class="headerlink" title="六、排序与分页"></a>六、排序与分页</h2><h3 id="1、排序数据"><a href="#1、排序数据" class="headerlink" title="1、排序数据"></a>1、排序数据</h3><h4 id="1-1-排序规则"><a href="#1-1-排序规则" class="headerlink" title="1.1 排序规则"></a>1.1 排序规则</h4><p>使用 ORDER BY 子句排序<br>    ASC（ascend）: 升序       (默认)<br>    DESC（descend）:降序<br><strong>ORDER BY 子句在SELECT语句的结尾。</strong></p>
<h4 id="1-2-单列排序"><a href="#1-2-单列排序" class="headerlink" title="1.2 单列排序"></a>1.2 单列排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, job_id, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name, job_id, department_id, hire_date</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee_id, last_name, salary<span class="operator">*</span><span class="number">12</span> annsal</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> annsal;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-多列排序"><a href="#1-3-多列排序" class="headerlink" title="1.3 多列排序"></a>1.3 多列排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_id, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_id, salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>可以使用不在SELECT列表中的列排序。</p>
<p>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第<br>一列数据中所有值都是唯一的，将不再对第二列进行排序。</p>
<h3 id="2、分页"><a href="#2、分页" class="headerlink" title="2、分页"></a>2、分页</h3><h4 id="2-1-分页原理"><a href="#2-1-分页原理" class="headerlink" title="2.1 分页原理"></a>2.1 分页原理</h4><p>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p>
<h4 id="2-2分页规则"><a href="#2-2分页规则" class="headerlink" title="2.2分页规则"></a>2.2分页规则</h4><p>MySQL中使用 LIMIT 实现分页</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT [位置偏移量,] 行数</span><br></pre></td></tr></table></figure>

<p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示（位偏移量就是index，开始的第一个索引），是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</p>
<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--前10条记录：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10</span>;</span><br><span class="line"><span class="comment">--第11至20条记录：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10</span>,<span class="number">10</span>;</span><br><span class="line"><span class="comment">--第21至30条记录：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT <span class="number">20</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p>
<p>分页显式公式：（当前页数-1）*每页条数，每页条数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line">LIMIT(PageNo <span class="operator">-</span> <span class="number">1</span>)<span class="operator">*</span>PageSize,PageSize;</span><br></pre></td></tr></table></figure>

<p><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></p>
<h2 id="七、多表查询"><a href="#七、多表查询" class="headerlink" title="七、多表查询"></a>七、多表查询</h2><p>多表查询的前提条件：这些一起查询的表之间有关系(一对一、一对多)，他们之间有关键的字段</p>
<h3 id="1、笛卡尔积-交叉连接"><a href="#1、笛卡尔积-交叉连接" class="headerlink" title="1、笛卡尔积(交叉连接)"></a>1、笛卡尔积(交叉连接)</h3><p>笛卡尔乘积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数XY即为两个集合中元素个数的乘积数。</p>
<p>比如下面就会出现笛卡尔积：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees, departments;</span><br></pre></td></tr></table></figure>

<p>笛卡尔积也是交叉连接，在SQL99中交叉连接是CROSS JOIN</p>
<p>避免笛卡尔积，可以在where后面加入有效的连接条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column, table2.column</span><br><span class="line"><span class="keyword">FROM</span> table1, table2</span><br><span class="line"><span class="keyword">WHERE</span> table1.column1 <span class="operator">=</span> table2.column2; #连接条件</span><br></pre></td></tr></table></figure>

<h3 id="2、多表查询的分类"><a href="#2、多表查询的分类" class="headerlink" title="2、多表查询的分类"></a>2、多表查询的分类</h3><h4 id="2-1-等值连接-VS-非等值连接"><a href="#2-1-等值连接-VS-非等值连接" class="headerlink" title="2.1 等值连接 VS 非等值连接"></a>2.1 等值连接 VS 非等值连接</h4><ol>
<li><p>等值连接</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/3.png"></p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.employee_id, employees.last_name,</span><br><span class="line">         employees.department_id, departments.department_id,</span><br><span class="line">        departments.location_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure>

<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/4.png"></p>
<p>注意：</p>
<ul>
<li><p>在多个表中具有相同的列时，必须在列名之前加上表名的前缀</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employees.last_name, departments.department_name,employees.department_id</span><br><span class="line"><span class="keyword">FROM</span> employees, departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id <span class="operator">=</span> departments.department_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用表的别名可以简化查询，使用别名作为前缀可以提高查询的效率（使用的时候建议加上别名）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.last_name, e.department_id,</span><br><span class="line">d.department_id, d.location_id</span><br><span class="line"><span class="keyword">FROM</span> employees e , departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure>

<p>一旦我们使用了表的别名，则在查询字段和过滤条件中只能使用别名，不能出现原有的表名</p>
</li>
<li><p>结论：在连接n个表的时候，至少需要n - 1个连接条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> d.location_id <span class="operator">=</span> l.location_id;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>非等值连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name, e.salary, j.grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e, job_grades j</span><br><span class="line"><span class="keyword">WHERE</span> e.salary <span class="keyword">BETWEEN</span> j.lowest_sal <span class="keyword">AND</span> j.highest_sal;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-2-自连接-vs-非自连接"><a href="#2-2-自连接-vs-非自连接" class="headerlink" title="2.2 自连接 vs 非自连接"></a>2.2 自连接 vs 非自连接</h4><ol>
<li><p>自连接</p>
<p>使用的是同一张表，只是用取别名的方式虚拟称两张表以代表不同的意义</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#练习：查询员工id，员工姓名，管理者的id和姓名</span><br><span class="line"><span class="keyword">SELECT</span> emp.employee_id,emp.last_name,mgr.employee_id,mgr.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees emp,employees mgr</span><br><span class="line"><span class="keyword">WHERE</span> emp.manager_id <span class="operator">=</span> mgr.employee_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非自连接</p>
<p>2.1 节都是非自连接</p>
</li>
</ol>
<h4 id="2-3-内连接-vs-外连接"><a href="#2-3-内连接-vs-外连接" class="headerlink" title="2.3 内连接 vs 外连接"></a>2.3 内连接 vs 外连接</h4><ol>
<li><p>内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.`department_id` <span class="operator">=</span> d.`department_id`;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行，还查询到左表或右表中不匹配的行</p>
<p>左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行</p>
<p>右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行</p>
<p>上面的语法是SQL92实现的内连接，MySQL不支持SQL92实现外连接</p>
<p>主要讲SQL99实现多表查询</p>
<ul>
<li>SQL99语法实现内连接：</li>
</ul>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#SQL99语法实现内连接</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d #<span class="keyword">inner</span>可以省略</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">JOIN</span> lication l</span><br><span class="line"><span class="keyword">ON</span> d.location_id <span class="operator">=</span> l.location_id</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>SQL99语法实现外连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询 所有（关键字，有所有说明是外连接） 员工的last_name,department_name信息</span><br><span class="line">#左外连接</span><br><span class="line">#语法：</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line">#举例：</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#右外连接</span><br><span class="line">#语法：</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line"><span class="keyword">FROM</span> A表 <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> B表</span><br><span class="line"><span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">WHERE</span> 等其他子句;</span><br><span class="line">#举例</span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>满外连接 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#满外连接：:mysql不支持<span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3、UNION的使用"><a href="#3、UNION的使用" class="headerlink" title="3、UNION的使用"></a>3、UNION的使用</h3><p>作用：合并查询结果 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p>
<p>语法格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span>,... <span class="keyword">FROM</span> table2</span><br></pre></td></tr></table></figure>

<p>UNION  与 UNION ALL 的区别</p>
<p>UNION 操作符返回两个查询的结果集的并集，去除重复记录</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/5.png"></p>
<p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/6.png"></p>
<p>举例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#方式<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span> <span class="keyword">OR</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">#方式<span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> email <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> department_id<span class="operator">&gt;</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4、7种SQL-JOINS的实现"><a href="#4、7种SQL-JOINS的实现" class="headerlink" title="4、7种SQL JOINS的实现"></a>4、7种SQL JOINS的实现</h3><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/7.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#中图：内连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#左上图：左外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#右上图：右外连接</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#左中图：</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name,d.department_id </span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;#找B中为<span class="keyword">null</span>的，但B中没有<span class="keyword">null</span>的，所以中间部分就没有了</span><br><span class="line"></span><br><span class="line">#右中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#左下图：满外连接</span><br><span class="line">#方式一：左上图 <span class="keyword">UNION</span> <span class="keyword">ALL</span>  右中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">#方式二：左中图 <span class="keyword">UNION</span> <span class="keyword">ALL</span>  右上图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id;</span><br><span class="line"></span><br><span class="line">#右下图：左中图 <span class="keyword">UNION</span> <span class="keyword">ALL</span> 右中图</span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="5、SQL99语法新特性"><a href="#5、SQL99语法新特性" class="headerlink" title="5、SQL99语法新特性"></a>5、SQL99语法新特性</h3><h4 id="5-1自然连接"><a href="#5-1自然连接" class="headerlink" title="5.1自然连接"></a>5.1自然连接</h4><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如 NATURAL JOIN 用来表示自然连接。我们可以把自然连接理解为SQL92 中的等值连接。<strong>它会帮你自动查询两张连接表中所有相同的字段</strong>，然后进行等值连接。</p>
<p>在SQL92标准中：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.`department_id` <span class="operator">=</span> d.`department_id`</span><br><span class="line"><span class="keyword">AND</span> e.`manager_id` <span class="operator">=</span> d.`manager_id`;</span><br></pre></td></tr></table></figure>

<p>在 SQL99 中你可以写成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> departments d;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-USING连接"><a href="#5-2-USING连接" class="headerlink" title="5.2 USING连接"></a>5.2 USING连接</h4><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的同名字段进行等值连接。但是只能配合JOIN一起使用。比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> employee_id,last_name,department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">USING</span> (department_id);</span><br></pre></td></tr></table></figure>

<h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="1、函数的分类"><a href="#1、函数的分类" class="headerlink" title="1、函数的分类"></a>1、函数的分类</h3><p>MySQL提供的内置函数从实现的功能角度可以分为<strong>数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数</strong>等。这里，我将这些丰富的内置函数再分为两类： 单行函数、聚合函数（或分组函数） 。单行函数接受参数返回一个结果，只对一行进行变换，每行返回一个结果，参数可以是一列或一个值。</p>
<h3 id="2、数值函数"><a href="#2、数值函数" class="headerlink" title="2、数值函数"></a>2、数值函数</h3><h4 id="2-1-基本函数"><a href="#2-1-基本函数" class="headerlink" title="2.1 基本函数"></a>2.1 基本函数</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/8.png"></p>
<h4 id="2-2-角度与弧度互换函数"><a href="#2-2-角度与弧度互换函数" class="headerlink" title="2.2 角度与弧度互换函数"></a>2.2 角度与弧度互换函数</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/9.png"></p>
<h4 id="2-3-三角函数"><a href="#2-3-三角函数" class="headerlink" title="2.3 三角函数"></a>2.3 三角函数</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/11.png"></p>
<h4 id="2-4-指数与对数"><a href="#2-4-指数与对数" class="headerlink" title="2.4 指数与对数"></a>2.4 指数与对数</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/12.png"></p>
<h4 id="2-5-进制间转换"><a href="#2-5-进制间转换" class="headerlink" title="2.5 进制间转换"></a>2.5 进制间转换</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/13.png"></p>
<h3 id="3、字符串函数"><a href="#3、字符串函数" class="headerlink" title="3、字符串函数"></a>3、字符串函数</h3><p>注意：在MySQL种，字符串的位置是从1开始</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/14.png"></p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/15.png"></p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/16.png"></p>
<h3 id="4、日期与时间函数"><a href="#4、日期与时间函数" class="headerlink" title="4、日期与时间函数"></a>4、日期与时间函数</h3><h4 id="4-1获取日期、时间"><a href="#4-1获取日期、时间" class="headerlink" title="4.1获取日期、时间"></a>4.1获取日期、时间</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/17.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>LR</title>
    <url>/2023/12/19/LR/</url>
    <content><![CDATA[<h1 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h1><h2 id="1-修图思路"><a href="#1-修图思路" class="headerlink" title="1. 修图思路"></a>1. 修图思路</h2><ol>
<li><p>合成</p>
<ul>
<li><p>曝光合成</p>
</li>
<li><p>全景合成</p>
</li>
</ul>
</li>
<li><p>修正</p>
<ul>
<li><p>裁剪构图</p>
</li>
<li><p>污点修复</p>
</li>
</ul>
</li>
<li><p>明暗</p>
<ul>
<li><p>曝光明暗</p>
</li>
<li><p>对比曲线</p>
</li>
<li><p>高光阴影</p>
</li>
<li><p>黑色白色</p>
</li>
</ul>
</li>
<li><p>色彩</p>
<ul>
<li><p>色温色调</p>
</li>
<li><p>分离色调</p>
</li>
<li><p>HSL调色、相机校准</p>
</li>
</ul>
</li>
<li><p>效果</p>
<ul>
<li><p>噪点颗粒</p>
</li>
<li><p>锐化细节</p>
</li>
</ul>
</li>
</ol>
<h2 id="2-瑕疵修复与透视矫正"><a href="#2-瑕疵修复与透视矫正" class="headerlink" title="2. 瑕疵修复与透视矫正"></a>2. 瑕疵修复与透视矫正</h2><h3 id="2-1-瑕疵修复"><a href="#2-1-瑕疵修复" class="headerlink" title="2.1 瑕疵修复"></a>2.1 瑕疵修复</h3><p>        LR中修复或者仿制可以P调一些多余的物体</p>
<h3 id="2-2-透视矫正"><a href="#2-2-透视矫正" class="headerlink" title="2.2 透视矫正"></a>2.2 透视矫正</h3><ul>
<li><p>透视原则：近大远小</p>
</li>
<li><p>透视类型：</p>
<ul>
<li><p>一点透视：横平竖直，只有一个消失点</p>
</li>
<li><p>两点透视：竖线垂直+有两个消失点（横线不平行画面）</p>
</li>
<li><p>三点透视：画面没有横平竖直的线</p>
</li>
</ul>
</li>
<li><p>矫正方法</p>
<ul>
<li><p>水平：自动水平方向矫正，适合海平线&#x2F;地平线</p>
</li>
<li><p>垂直：自动垂直方向矫正，实现两点透视</p>
</li>
<li><p>完全：实现一点透视</p>
</li>
<li><p>引动&#x2F;自动：都可以使用，通过画水平垂直线来引导LR矫正，广角拍摄的照片最好使用边缘的建筑绘制引导线</p>
</li>
<li><p>手动操作调整水平垂直等</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-裁剪"><a href="#2-3-裁剪" class="headerlink" title="2.3 裁剪"></a>2.3 裁剪</h3><ol>
<li><p>根据风格确认画幅比例</p>
<ul>
<li>电影感：2.35：1</li>
</ul>
</li>
<li><p>确认画面主体元素</p>
</li>
<li><p>去掉无关因素</p>
</li>
</ol>
<h3 id="2-4-配置文件矫正"><a href="#2-4-配置文件矫正" class="headerlink" title="2.4 配置文件矫正"></a>2.4 配置文件矫正</h3><p>镜头矫正面板：</p>
<ol>
<li><p>色差：紫边、绿边、老镜头明显</p>
</li>
<li><p>暗角：四周暗、中心亮、广角比较明显</p>
</li>
<li><p>扭曲度：边缘弯曲的畸变、广角桶形畸变、长焦枕形畸变</p>
</li>
</ol>
<h2 id="3-明暗调整"><a href="#3-明暗调整" class="headerlink" title="3.明暗调整"></a>3.明暗调整</h2><ul>
<li><p>曝光：影响画面的整体亮度</p>
</li>
<li><p>对比度：控制画面的反差(明暗的反差)</p>
</li>
<li><p>高光：画面中较亮部分</p>
</li>
<li><p>阴影：画面中较暗部分</p>
</li>
<li><p>白色色阶：控制画面中最亮部分</p>
</li>
<li><p>黑色色阶：控制画面中最暗部分</p>
</li>
</ul>
<p>总结：</p>
<ol>
<li><p>曝光：定基调&#x2F;影调、</p>
</li>
<li><p>高光阴影：恢复画面细节</p>
</li>
<li><p>黑色白色：控制画面反差通透</p>
</li>
<li><p>对比度：微调反差</p>
</li>
</ol>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji23.jpg"></p>
<h2 id="4-色彩调整"><a href="#4-色彩调整" class="headerlink" title="4. 色彩调整"></a>4. 色彩调整</h2><ul>
<li><p>加色模型：三原色RGB，三个颜色两两形成的是二次色，是自发光体</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji24.jpg"></p>
</li>
<li><p>减色模型：C(青色)M(品红色)Y(黄色)</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji256.jpg"></p>
</li>
<li><p>加色模型的二次色是减色模型CMY的原色</p>
<p>减色模型的三原色是加色模型RGB的三原色</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji25.jpg"></p>
<p>支持色(相邻色)：比如说青色是蓝色和绿色的相邻色，通过增加青色和蓝色可以增加画面中绿色的纯度，相当于支持性的作用，一般想增加某个颜色的鲜艳和纯净程度，就可以增加相邻色</p>
<p>互补色(消色)：用来抵消某个颜色的纯度，一般在图表上成对立关系，比如黄色和蓝色，如果想减少蓝色，就可以增加黄色</p>
</li>
<li><p>HSL模型：色相&#x2F;饱和度&#x2F;明度</p>
<ul>
<li><p>色相：表明颜色种类</p>
</li>
<li><p>饱和度：颜色的鲜艳程度</p>
</li>
<li><p>明度：表示暗色和亮色</p>
</li>
</ul>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji26.jpg"></p>
</li>
<li><p>对应LR操作</p>
<ul>
<li><p>色温：影响画面的蓝&#x2F;黄色彩倾向</p>
</li>
<li><p>色调：影响画面青&#x2F;品色彩倾向</p>
</li>
</ul>
</li>
</ul>
<h2 id="5-局部调整"><a href="#5-局部调整" class="headerlink" title="5. 局部调整"></a>5. 局部调整</h2><ul>
<li><p>局部调整工具</p>
<ul>
<li><p>智能选择</p>
<ul>
<li><p>选择主体</p>
</li>
<li><p>选择天空</p>
</li>
<li><p>选择背景</p>
</li>
<li><p>选择人物</p>
</li>
<li><p>对象选择</p>
</li>
</ul>
</li>
<li><p>区域选择</p>
<ul>
<li><p>画笔</p>
</li>
<li><p>线性渐变</p>
</li>
<li><p>径向渐变</p>
</li>
</ul>
</li>
<li><p>范围选择</p>
<ul>
<li><p>明亮度范围</p>
</li>
<li><p>色彩范围</p>
</li>
<li><p>景深范围</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6-噪点与锐化"><a href="#6-噪点与锐化" class="headerlink" title="6. 噪点与锐化"></a>6. 噪点与锐化</h2><ol>
<li><p>噪点</p>
<p>噪点是画面中一些白色或者彩色的颗粒，通常是因为高ISO拍摄或者大幅度欠曝提升阴影而产生的</p>
<ul>
<li><p>明度噪点：白色颗粒</p>
</li>
<li><p>色彩噪点：红绿蓝彩色颗粒</p>
</li>
</ul>
</li>
<li><p>科学降噪</p>
<ul>
<li><p>明度噪点：使用细节中的明亮度，值越大效果越好，但是画面细节也会缺失</p>
</li>
<li><p>色彩噪点：使用细节中的颜色</p>
</li>
</ul>
</li>
<li><p>使用插件降噪</p>
<p><code>DeNoise Al</code>可参考杰夫流程2.0</p>
</li>
<li><p>胶片感照片</p>
<p>效果中添加颗粒</p>
</li>
<li><p>锐化</p>
<ul>
<li><p>定义：增加了对边缘细小对比，让线条变得更加清晰</p>
</li>
<li><p>操作：基本面板纹理和细节面板</p>
<p>细节面板：</p>
<ol>
<li><p>数量：为0关闭锐化，数值大锐化效果越强烈</p>
</li>
<li><p>细节半径一般默认：半径控制大纹理还是小纹理锐化，细节很多的照片需要小半径。细节是对物体边缘的强调程度，值越大画面边缘越明显</p>
</li>
<li><p>蒙版：控制画面哪个地方需要被锐化，通过alt调整观察，白色是会被锐化掉的细节，黑色不会</p>
</li>
</ol>
</li>
<li><p>锐化步骤</p>
<ol>
<li><p>初步锐化</p>
<ul>
<li><p>纹理&#x2F;清晰度</p>
</li>
<li><p>适度提升</p>
</li>
</ul>
</li>
<li><p>精细锐化</p>
<ul>
<li><p>锐化面板</p>
</li>
<li><p>调整蒙版</p>
</li>
</ul>
</li>
<li><p>输出锐化</p>
<ul>
<li><p>选择介质：屏幕</p>
</li>
<li><p>选择程度</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>去朦胧</p>
<ul>
<li>正向提升可以去除雾霾感，让更面更通透，但是画面饱和度和对比度会变高</li>
</ul>
</li>
</ul>
</li>
<li><p>导出</p>
<ul>
<li><p>右键导出</p>
<ul>
<li><p>适当提升文件质量</p>
</li>
<li><p>调整大小，一般长边三千</p>
</li>
<li><p>选择输出锐化</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="7-曝光合成和全景合成"><a href="#7-曝光合成和全景合成" class="headerlink" title="7. 曝光合成和全景合成"></a>7. 曝光合成和全景合成</h2><p>注：未完待续….</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>后期</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2022/04/11/MyBatis/</url>
    <content><![CDATA[<h2 id="一、MyBatis简介"><a href="#一、MyBatis简介" class="headerlink" title="一、MyBatis简介"></a>一、MyBatis简介</h2><h3 id="1、MyBatis特性"><a href="#1、MyBatis特性" class="headerlink" title="1、MyBatis特性"></a>1、MyBatis特性</h3><ol>
<li>MyBatis支持定制化SQL、存储过程以及高级映射（实体类的属性与数据库字段之间映射）的持久层框架</li>
<li>MyBatis几乎避免了所有JDBC代码和手动设置参数以及获取结果集</li>
<li>MyBatis可以使用简单的xml或注解用于配置和原始映射，将接口和java的pojo映射成数据库中的记录</li>
<li>MyBatis是一个半自动的ORM（对象关系映射）框架</li>
</ol>
<h3 id="2、和其他持久层技术对比"><a href="#2、和其他持久层技术对比" class="headerlink" title="2、和其他持久层技术对比"></a>2、和其他持久层技术对比</h3><ul>
<li><p>JDBC</p>
<p>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</p>
<p>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</p>
<p>代码冗长，开发效率低</p>
</li>
<li><p>Hibernate 和 JPA</p>
<p>操作简便，开发效率高</p>
<p>程序中的长难复杂 SQL 需要绕过框架（框架内部封装了一些SQL，但是长难复杂的不一定有）</p>
<p>内部自动生产的 SQL，不容易做特殊优化</p>
<p>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</p>
<p>反射操作太多，导致数据库性能下降</p>
</li>
<li><p>MyBatis</p>
<p>轻量级，性能出色</p>
<p>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</p>
<p>开发效率稍逊于HIbernate，但是完全能够接受</p>
</li>
</ul>
<h2 id="二、搭建MyBatis"><a href="#二、搭建MyBatis" class="headerlink" title="二、搭建MyBatis"></a>二、搭建MyBatis</h2><h2 id="1、创建Maven工程"><a href="#1、创建Maven工程" class="headerlink" title="1、创建Maven工程"></a>1、创建Maven工程</h2><h4 id="a-打包方式：jar"><a href="#a-打包方式：jar" class="headerlink" title="a-&gt;打包方式：jar"></a>a-&gt;打包方式：jar</h4><h4 id="b-引入依赖"><a href="#b-引入依赖" class="headerlink" title="b-&gt;引入依赖"></a>b-&gt;引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置打包方式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、创建MyBatis的核心配置文件"><a href="#2、创建MyBatis的核心配置文件" class="headerlink" title="2、创建MyBatis的核心配置文件"></a>2、创建MyBatis的核心配置文件</h2><p>核心配置文件习惯上命名为mybatis-config.xml，在整合Spring之后，此配置文件可以省略</p>
<p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息，存放的位置是src\main\resources目录下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、创建mapper接口"><a href="#3、创建mapper接口" class="headerlink" title="3、创建mapper接口"></a>3、创建mapper接口</h2><p>MyBatis中的mapper接口相当于以前的dao，但是区别是mapper仅仅是接口，我们不需要提供实现类。mybatis有面向接口的编程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、创建MyBatis的映射文件"><a href="#4、创建MyBatis的映射文件" class="headerlink" title="4、创建MyBatis的映射文件"></a>4、创建MyBatis的映射文件</h2><p>相关概念：ORM    对象关系映射</p>
<ul>
<li>对象：Java的实体类对象</li>
<li>关系：关系型数据库</li>
<li>映射：二者之间的对应关系</li>
</ul>
<table>
<thead>
<tr>
<th>java概念</th>
<th>数据库概念</th>
</tr>
</thead>
<tbody><tr>
<td>类</td>
<td>表</td>
</tr>
<tr>
<td>属性</td>
<td>字段&#x2F;列</td>
</tr>
<tr>
<td>对象</td>
<td>记录&#x2F;行</td>
</tr>
</tbody></table>
<ol>
<li><p>映射文件的命名规则</p>
<p>表所对应的实体类的类名 + Mapper.xml</p>
<p>比如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p>
<p>因此一个映射文件对应一个实体类，对应一张表的操作。有几张表就有几个Mapper接口以及映射文件</p>
<p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p>
<p>MyBatis映射文件存放的位置：src\main\resource\mappers目录下</p>
</li>
<li><p>MyBatis中可以面向接口操作数据，需要保持两个一致</p>
<ul>
<li>mapper接口全类名和映射文件的命名空间(namespace)保持一致</li>
<li>mapper接口中方法的方法名和映射文件中编写的SQL的标签的id属性保持一致</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中方法名一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 表 - 实体类 - mapper接口 - 映射文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--insertUser--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMyBatis</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">        <span class="comment">//获取SqlSession,参数是设置是否自动提交事务，默认是false不提交事务</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取mapper接口对象,不需要通过实现类就可以创建</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//测试功能</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SqlSession：表示java程序和数据库之间的会话(HttpSession是java程序和浏览器之间的会话)</li>
<li>SqlSessionFactory：是生产SqlSession的工厂</li>
<li>工厂模式：如果创建一个对象，使用的过程基本固定，我们可以把创建这个对象的相关代码封装到一个工厂类中，以后都使用这个工厂类来生产我们需要的对象</li>
</ul>
<h2 id="6、加入log4j日志功能"><a href="#6、加入log4j日志功能" class="headerlink" title="6、加入log4j日志功能"></a>6、加入log4j日志功能</h2><h3 id="a-加入依赖"><a href="#a-加入依赖" class="headerlink" title="a&gt;加入依赖"></a>a&gt;加入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="b-加入log4j配置文件"><a href="#b-加入log4j配置文件" class="headerlink" title="b&gt;加入log4j配置文件"></a>b&gt;加入log4j配置文件</h3><p>加入的位置在resources下面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>日志的级别</p>
<p>FATAL(致命) &gt; ERROR(错误) &gt; WARN(警告)  &gt; INFO(信息) &gt; DEBUG(调式)</p>
<p>级别越高，打印的内容越少</p>
<h2 id="三、MyBatis实现增删改查"><a href="#三、MyBatis实现增删改查" class="headerlink" title="三、MyBatis实现增删改查"></a>三、MyBatis实现增删改查</h2><h3 id="1、增"><a href="#1、增" class="headerlink" title="1、增"></a>1、增</h3><p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中方法名一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 表 - 实体类 - mapper接口 - 映射文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--namespace与接口的路径一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--insertUser，id与接口中的方法名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//加载核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//获取SqlSessionFactoryBuilder</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="comment">//获取SqlSession,默认是false不自动提交事务，true是设置自动提交</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//获取mapper接口对象,不需要通过实现类就可以创建</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//测试功能,调用接口中的方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser();</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h3><p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中方法名一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 表 - 实体类 - mapper接口 - 映射文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--void updateUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">        update t_user set username = &#x27;张三&#x27; where id = 4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取核心配置文件的流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//准备建工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">//建工厂</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="comment">//开启会话</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//获取接口的实现类</span></span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="comment">//调用方法</span></span><br><span class="line">    mapper.updateUser();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h3><p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hua.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中方法名一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 表 - 实体类 - mapper接口 - 映射文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UerMapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--void deleteUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">        delete from t_user where id = 5</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、查询"><a href="#4、查询" class="headerlink" title="4、查询"></a>4、查询</h3><p><strong>注意：在所有的查询的接口配置文件中需要添加属性resultType或resultMap</strong></p>
<h4 id="1、根据id查"><a href="#1、根据id查" class="headerlink" title="1、根据id查"></a>1、根据id查</h4><p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中方法名一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 表 - 实体类 - mapper接口 - 映射文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserMapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--User getUserById--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        查询功能的标签必须设置resultType或resultMap</span></span><br><span class="line"><span class="comment">        resultType：设置默认的映射关系，能够将读到的字段名匹配到对应的属性名</span></span><br><span class="line"><span class="comment">        resultMap：设置自定义的映射关系，字段名与属性名不一致</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hua.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = 4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetUserById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、查询所有的用户"><a href="#2、查询所有的用户" class="headerlink" title="2、查询所有的用户"></a>2、查询所有的用户</h4><p>UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis面向接口编程的两个一致</span></span><br><span class="line"><span class="comment">     * 1、映射文件的namespace要和mapper接口的全类名保持一致</span></span><br><span class="line"><span class="comment">     * 2、映射文件中SQL语句的id要和mapper接口中方法名一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 表 - 实体类 - mapper接口 - 映射文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UerMapper配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List&lt;User&gt; getAllUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hua.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetAllUser</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; user = mapper.getAllUser();</span><br><span class="line">    <span class="keyword">for</span>(User i : user)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、核心配置文件讲解（了解）"><a href="#四、核心配置文件讲解（了解）" class="headerlink" title="四、核心配置文件讲解（了解）"></a>四、核心配置文件讲解（了解）</h2><h3 id="1、原始配置文件讲解"><a href="#1、原始配置文件讲解" class="headerlink" title="1、原始配置文件讲解"></a>1、原始配置文件讲解</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境</span></span><br><span class="line"><span class="comment">        environments:配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                id：表示连接数据库的环境的唯一标识，不能重复，default就是调用的这边的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务的管理方式</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="line"><span class="comment">                    JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">                    MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：配置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                    type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="line"><span class="comment">                    POOLED:表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    UNPOOLED：表示不使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/Usermapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、使用properrties文件进行数据库的连接"><a href="#2、使用properrties文件进行数据库的连接" class="headerlink" title="2、使用properrties文件进行数据库的连接"></a>2、使用properrties文件进行数据库的连接</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境</span></span><br><span class="line"><span class="comment">        environments:配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                id：表示连接数据库的环境的唯一标识，不能重复，default就是调用的这边的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务的管理方式</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="line"><span class="comment">                    JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">                    MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：配置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                    type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="line"><span class="comment">                    POOLED:表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    UNPOOLED：表示不使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/Usermapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、类型别名"><a href="#3、类型别名" class="headerlink" title="3、类型别名"></a>3、类型别名</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    MyBatis核心配置文件中，标签的顺序</span></span><br><span class="line"><span class="comment">    properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,</span></span><br><span class="line"><span class="comment">    objectWrapperFactory?,reflectorFactory?,plugins?,environments?,</span></span><br><span class="line"><span class="comment">    databaseIdProvider?,mappers?</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意：写出来的顺序必须按照上面的顺序，否则会报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--typeAlias：设置类型别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">            alias：设置某个类型的别名，若不设置该属性，那么该属性拥有默认的别名，别名就是类名，且不区分大小写</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在使用slect语句的resultType时可用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.hua.mybatis.pojo.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位将包下所有的类型设置默认的类型别名，别名就是类名，且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hua.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境</span></span><br><span class="line"><span class="comment">        environments:配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                id：表示连接数据库的环境的唯一标识，不能重复，default就是调用的这边的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务的管理方式</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type=&quot;JDBC/MANAGED&quot;</span></span><br><span class="line"><span class="comment">                    JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">                    MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：配置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                    type=&quot;POOLED/UNPOOLED/JNDI&quot;</span></span><br><span class="line"><span class="comment">                    POOLED:表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    UNPOOLED：表示不使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/Usermapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    查询功能的标签必须设置resultType或resultMap</span></span><br><span class="line"><span class="comment">    resultType：设置默认的映射关系，能够将读到的字段名匹配到对应的属性名</span></span><br><span class="line"><span class="comment">    resultMap：设置自定义的映射关系，字段名与属性名不一致</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hua.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = 4</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser()</span></span><br><span class="line"><span class="comment">    因为在核心配置文件中设置了类型别名，所以可以通过User代替全路径名</span></span><br><span class="line"><span class="comment">    类型别名不区分大小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、mapper讲解"><a href="#4、mapper讲解" class="headerlink" title="4、mapper讲解"></a>4、mapper讲解</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/Usermapper.mapper&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        以包为单位引入映射文件</span></span><br><span class="line"><span class="comment">        要求：</span></span><br><span class="line"><span class="comment">        1、mapper接口所在包要和映射文件所在包一致</span></span><br><span class="line"><span class="comment">        2、mapper接口要和映射文件的名字一致</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hua.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：在resources下创建包的时候不用 . 而是使用 &#x2F;</p>
<h3 id="5、一些技巧"><a href="#5、一些技巧" class="headerlink" title="5、一些技巧"></a>5、一些技巧</h3><ul>
<li><p>在进行测试的时候，我们可以提取建工厂的部分到一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">            sqlSession = sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们可以将核心配置文件以及接口的配置文件封装起来</p>
<p>将写好的通用的代码赋值一下，在settings -&gt; editor -&gt; file and code templates中添加一个通用模板</p>
</li>
</ul>
<h2 id="五、MyBatis获取参数值的两种方式-重点"><a href="#五、MyBatis获取参数值的两种方式-重点" class="headerlink" title="五、MyBatis获取参数值的两种方式(重点)"></a>五、MyBatis获取参数值的两种方式(重点)</h2><p>目的：不写死sql语句，可以获取接口中传过来的参数</p>
<p>MyBatis获取参数值的两种方式：${} 和 #{}</p>
<p>${} 的本质就是<strong>字符串的拼接</strong>，#{} 的本质就是<strong>占位符赋值</strong></p>
<p>${}使用字符串的方式拼接sql，若为字符串类型或者日期类型的字段进行赋值时，需要手动加单引号</p>
<p>#{}使用占位符的方式拼接sql，此时为字符串类型或者日期类型的字段进行赋值时，可以<strong>自动添加单引号</strong></p>
<h3 id="1、单个字面量类型的参数"><a href="#1、单个字面量类型的参数" class="headerlink" title="1、单个字面量类型的参数"></a>1、单个字面量类型的参数</h3><p>若mapper接口中的方法参数为单个的字面量类型</p>
<p>此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号，括号里面可以随便写，但是最好与形参名一致</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名查询用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserByUername</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure>

<p>配置文件代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUername(String username)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;username&#125;--&gt;</span></span><br><span class="line">    select * from t_user w9ere username = &#x27;$&#123;username&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis获取参数值的两种方式：$&#123;&#125; 和 #&#123;&#125;</span></span><br><span class="line"><span class="comment"> * $&#123;&#125;本质字符串拼接，要注意sql注入</span></span><br><span class="line"><span class="comment"> * #&#123;&#125;本质占位符赋值</span></span><br><span class="line"><span class="comment"> * MyBatis来获取参数值的各种情况</span></span><br><span class="line"><span class="comment"> * 1、mapper接口方法的参数为单个的字面量类型</span></span><br><span class="line"><span class="comment"> *  可以通过$&#123;&#125; 和 #&#123;&#125;以任意的名称获取参数值，但是要注意$&#123;&#125;的单引号问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByUsername</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//SqlSessionUtils是封装的工具类</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils是封装的工具类.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserByUername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、多个字面量类型的参数"><a href="#2、多个字面量类型的参数" class="headerlink" title="2、多个字面量类型的参数"></a>2、多个字面量类型的参数</h3><p>mapper接口的参数为多个值的时候<br>此时MyBatis会将这些参数放在一个map集合中，以两种方式进行存储<br>a-&gt;以arg0，arg1…..为键，以参数为值<br>b-&gt;以param1、param2….为键，以参数为值</p>
<p>因此我们只需要通过#{} 和 ${}以键的方式访问值即可，但是要注意${}的单引号问题。键值为系统设置的</p>
<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证登陆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">checkLogin</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    User checkLogin(String username,String password)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;--&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;arg0&#125;&#x27; and password = &#x27;$&#123;arg1&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLogin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLogin(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、Map集合类型的参数"><a href="#3、Map集合类型的参数" class="headerlink" title="3、Map集合类型的参数"></a>3、Map集合类型的参数</h3><p>若mapper接口方法的参数有多个时，可以手动将这些参数放在一个map中进行存储</p>
<p>因此我们只需要通过#{} 和 ${}以键的方式访问值即可，但是要注意${}的单引号问题。键值为自己设置的</p>
<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证登录(参数为map)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;checkLoginByMap&quot;</span> resultType=<span class="string">&quot;User&quot;</span>&gt;</span><br><span class="line">    select * from t_user <span class="type">where</span> <span class="variable">username</span> <span class="operator">=</span> #&#123;username&#125; <span class="type">and</span> <span class="variable">password</span> <span class="operator">=</span> #&#123;password&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByMap(map);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、实体类型的参数"><a href="#4、实体类型的参数" class="headerlink" title="4、实体类型的参数"></a>4、实体类型的参数</h3><p>若mapper接口中的方法参数为实体类对象时</p>
<p>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>接口代码配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.insertUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;发子&quot;</span>, <span class="string">&quot;123456&quot;</span>,<span class="number">23</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、使用-Param标识参数"><a href="#5、使用-Param标识参数" class="headerlink" title="5、使用@Param标识参数"></a>5、使用@Param标识参数</h3><ul>
<li>此时MyBatis会将这些参数放在一个map集合中，以两种方式进行存储</li>
<li>a-&gt;以@param注解的值为键，以参数为值</li>
<li>b-&gt;以param1、param2….为键，以参数为值</li>
<li>因此我们只需要通过#{} 和 ${}以键的方式访问值即可，但是要注意${}的单引号问题</li>
</ul>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证登陆（使用<span class="doctag">@param</span>）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">checkLoginByParam</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByParam--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCheckLoginByParam</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">ParameterMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(ParameterMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.checkLoginByParam(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、MyBatis各种查询功能"><a href="#六、MyBatis各种查询功能" class="headerlink" title="六、MyBatis各种查询功能"></a>六、MyBatis各种查询功能</h2><h3 id="1、查询一个实体类对象"><a href="#1、查询一个实体类对象" class="headerlink" title="1、查询一个实体类对象"></a>1、查询一个实体类对象</h3><p>若查询出的数据只有一条</p>
<ul>
<li>a&gt;可以通过实体类对象接收</li>
<li>b&gt;可以通过list集合接收</li>
<li>c&gt;可以通过map集合接收</li>
</ul>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;ID&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.SelectMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--User getUserById()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = #&#123;ID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetUserById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">7</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、查询一个list集合"><a href="#2、查询一个list集合" class="headerlink" title="2、查询一个list集合"></a>2、查询一个list集合</h3><p>查询的数据有多条</p>
<p>a&gt;可以通过list集合接收</p>
<p>b&gt;可以通过map类型的list集合接收</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.SelectMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;User&gt; getAllUser()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    List&lt;User&gt; user = mapper.getAllUser();</span><br><span class="line">    <span class="keyword">for</span> (User i : user)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、查询单个数据"><a href="#3、查询单个数据" class="headerlink" title="3、查询单个数据"></a>3、查询单个数据</h3><p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户信息的总记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer <span class="title function_">getAllNumbers</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.SelectMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Integer getAllNumbers()，注意resultType的类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllNumbers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testgetAllNumbers</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">numbers</span> <span class="operator">=</span> mapper.getAllNumbers();</span><br><span class="line">    System.out.println(numbers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口配置文件中的resultType中的值写的是别名，别名表如下：</p>
<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/7.png"></p>
<p><img src="https://picture-1310712259.cos.ap-nanjing.myqcloud.com/8.png"></p>
<h3 id="4、查询一个数据为map集合"><a href="#4、查询一个数据为map集合" class="headerlink" title="4、查询一个数据为map集合"></a>4、查询一个数据为map集合</h3><p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询用户信息为一个map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">getUserByIdToMap</span><span class="params">(<span class="meta">@Param(&quot;ID&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.SelectMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Map&lt;String,Object&gt; getUserByIdToMap(@Param(&quot;ID&quot;) Integer id)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByIdToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from t_user where id = #&#123;ID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByIdToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = mapper.getUserByIdToMap(<span class="number">4</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//存储在map中，以字段为键，以属性值为键值</span></span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、查询多条数据为map集合"><a href="#5、查询多条数据为map集合" class="headerlink" title="5、查询多条数据为map集合"></a>5、查询多条数据为map集合</h3><p>方式一：将查询到的每一个map存储在List集合中</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口代码配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String,Object&gt; getAllUserToMap()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAllUserToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; allUserToMap = mapper.getAllUserToMap();</span><br><span class="line">    System.out.println(allUserToMap);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>方式二：完全通过map存储</p>
<p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span><span class="comment">//作用，将id作为map的键，将map结果作为对应的值。挑选的键要唯一</span></span><br><span class="line">Map&lt;String,Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String,Object&gt; getAllUserToMap()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAllUserToMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SelectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SelectMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; allUserToMap = mapper.getAllUserToMap();</span><br><span class="line">    System.out.println(allUserToMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七、执行特殊的SQL"><a href="#七、执行特殊的SQL" class="headerlink" title="七、执行特殊的SQL"></a>七、执行特殊的SQL</h2><p>主要考虑的是使用${}还是#{}，注意两者的区别</p>
<h3 id="1、模糊查询"><a href="#1、模糊查询" class="headerlink" title="1、模糊查询"></a>1、模糊查询</h3><p>注意接口代码配置文件的三种方式，推荐最后一种。不能使用select * from t_user where username like ‘%#{Username}%’，因为#{Username}会自动添加上单引号</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名模糊查询用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByLike</span><span class="params">(<span class="meta">@Param(&quot;Username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.SQLMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;Username&quot;) String username)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;Username&#125;%&#x27;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;Username&#125;,&#x27;%&#x27;)--&gt;</span></span><br><span class="line">        select * from t_user where username like &quot;%&quot;#&#123;Username&#125;&quot;%&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByLike</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    List&lt;User&gt; list = mapper.getUserByLike(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、批量删除"><a href="#2、批量删除" class="headerlink" title="2、批量删除"></a>2、批量删除</h3><p>只能使用${}，因为#{}会自动添加上单引号</p>
<p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteMore</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.deleteMore(<span class="string">&quot;1,2,4&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、动态设置表名"><a href="#3、动态设置表名" class="headerlink" title="3、动态设置表名"></a>3、动态设置表名</h3><p>只能使用${}，因为表名不能加单引号</p>
<p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询指定表中数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserByTableName</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure>

<p>接口代码配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   List&lt;User&gt; getUserByTableName(@Param(&quot;tableName&quot;) String tableName)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByTableName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetUserByTableName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    List&lt;User&gt; t_user = mapper.getUserByTableName(<span class="string">&quot;t_user&quot;</span>);</span><br><span class="line">    System.out.println(t_user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、添加功能获取自增的主键"><a href="#4、添加功能获取自增的主键" class="headerlink" title="4、添加功能获取自增的主键"></a>4、添加功能获取自增的主键</h3><p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--void insertUser(User user)</span></span><br><span class="line"><span class="comment">    useGeneratedKeys：设置当前标签中的sql使用了自增的主键</span></span><br><span class="line"><span class="comment">    Property：将自增的主键赋值给传输到映射文件中参数的某个属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionUtils.getSqlSession();</span><br><span class="line">    <span class="type">SQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(SQLMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;afei&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    mapper.insertUser(user);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、自定义映射-ResultMap"><a href="#八、自定义映射-ResultMap" class="headerlink" title="八、自定义映射(ResultMap)"></a>八、自定义映射(ResultMap)</h2><p>本节主要讲字段名与属性名不匹配时解决的手法</p>
<h3 id="1、环境搭建-最新"><a href="#1、环境搭建-最新" class="headerlink" title="1、环境搭建(最新)"></a>1、环境搭建(最新)</h3><ol>
<li><p>创建maven工程</p>
</li>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hua.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyBatis_demo3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置打包方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在resources下写jdbc配置文件和日志文件</p>
<p>jdbc</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">abc123</span></span><br></pre></td></tr></table></figure>

<p>日志文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写核心配置文件，在resources下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hua.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hua.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在java(mapper和pojo)和resources(mapper)下创建对应的包，注意resources下创建包的方式</p>
</li>
<li><p>编写实体类以及对应的配置文件</p>
</li>
</ol>
<h3 id="2、通过起别名来解决字段名与属性名不同"><a href="#2、通过起别名来解决字段名与属性名不同" class="headerlink" title="2、通过起别名来解决字段名与属性名不同"></a>2、通过起别名来解决字段名与属性名不同</h3><p>为字段起别名，保持和属性名的一致，如果不起别名也不会报错，只是不一致名字的就没有显示了</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getAllEmp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">       select eid,emp_name empName,age,sex,email from t_emp  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllEmp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    List&lt;Emp&gt; allEmp = mapper.getAllEmp();</span><br><span class="line">    System.out.println(allEmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、设置全局配置"><a href="#3、设置全局配置" class="headerlink" title="3、设置全局配置"></a>3、设置全局配置</h3><p>通过设置全局配置，将 _ 自动映射为驼峰</p>
<p>在核心配置文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置MyBatis的全局配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将 _ 自动映射为驼峰，比如：emp_name : empName--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getAllEmp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--select eid,emp_name empName,age,sex,email from t_emp--&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllEmp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    List&lt;Emp&gt; allEmp = mapper.getAllEmp();</span><br><span class="line">    System.out.println(allEmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、通过resultMap"><a href="#4、通过resultMap" class="headerlink" title="4、通过resultMap"></a>4、通过resultMap</h3><p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getAllEmp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultMap：设置自定义映射关系</span></span><br><span class="line"><span class="comment">        id:设置唯一标识，不可重复</span></span><br><span class="line"><span class="comment">        type：设置映射关系的实体类类型</span></span><br><span class="line"><span class="comment">        子标签：</span></span><br><span class="line"><span class="comment">            id:设置主键的映射关系</span></span><br><span class="line"><span class="comment">            result:设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">        property:设置映射关系中的属性名，必须是type属性所设置的实体类类型中的属性名</span></span><br><span class="line"><span class="comment">        column：设置映射关系中的字段名，必须是sql语句查询出的字段名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Emp&gt; getAllEmp()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAllEmp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    List&lt;Emp&gt; allEmp = mapper.getAllEmp();</span><br><span class="line">    System.out.println(allEmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、多对一映射处理"><a href="#5、多对一映射处理" class="headerlink" title="5、多对一映射处理"></a>5、多对一映射处理</h3><p>查询员工信息以及员工所对应的部门信息</p>
<ol>
<li><p>方式一：级联方式处理映射关系</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getAllEmp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p><strong>要在emp类中创建Dept类以及对应的get和set方法</strong></p>
<p>接口配置文件</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理多对一映射关系方式一：级联属性赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dept.deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;) Integer eid)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapOne&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmpAndDept</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">empAndDept</span> <span class="operator">=</span> mapper.getEmpAndDept(<span class="number">1</span>);</span><br><span class="line">    System.out.println(empAndDept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>通过association来处理多对一的关系</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询员工以及员工所对应部门的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDept</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理多对一映射关系方式二：通过association--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        association：处理多对一的映射关系</span></span><br><span class="line"><span class="comment">        property:需要处理多对一映射关系的属性名</span></span><br><span class="line"><span class="comment">        javaType:该属性的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;) Integer eid)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDept&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptResultMapTwo&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmpAndDept</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">empAndDept</span> <span class="operator">=</span> mapper.getEmpAndDept(<span class="number">1</span>);</span><br><span class="line">    System.out.println(empAndDept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>分步查询处理多对一的关系</p>
<p>接口代码</p>
<p>EmpMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询员工以及员工所对应部门的信息</span></span><br><span class="line"><span class="comment"> * 分布查询第一步查询员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Emp <span class="title function_">getEmpAndDeptByStepOne</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br></pre></td></tr></table></figure>

<p>DeptMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分布查询员工以及员工所对应的部门信息</span></span><br><span class="line"><span class="comment"> * 分布查询的第二步：通过did查询员工所对应的部门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getEmpAndDeptByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>

<p>配置文件代码</p>
<p>EmpMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select:设置分步查询的sql的唯一标识(namesqace.SQLId 或 mapper接口的全类名.方法名)</span></span><br><span class="line"><span class="comment">        column:设置分步查询的条件</span></span><br><span class="line"><span class="comment">        fetchType:当开启全局的延迟加载之后，可通过此属性手动控制延迟加载的效果</span></span><br><span class="line"><span class="comment">            fetchType=&quot;lazy/eager&quot;</span></span><br><span class="line"><span class="comment">                eager:立即加载</span></span><br><span class="line"><span class="comment">                lazy：延迟加载</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.hua.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DeptMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.DeptMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Dept getEmpAndDeptByStepTwo(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        select * from t_dept where did = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpAndDeptByStep</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">empAndDept</span> <span class="operator">=</span> mapper.getEmpAndDeptByStepOne(<span class="number">1</span>);</span><br><span class="line">    System.out.println(empAndDept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>延迟加载</p>
<h3 id="6、一对多映射处理"><a href="#6、一对多映射处理" class="headerlink" title="6、一对多映射处理"></a>6、一对多映射处理</h3><p>注意：一对多，在一实体类里面创建多的集合；多对一：在多里面创建一的对象</p>
<ol>
<li><p>方式一：使用collection</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 部门以及部门中所有员工信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmp</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>

<p>注意：需要在dept里面创建emp集合</p>
<p>接口配置</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Collection：处理一对多的映射关系</span></span><br><span class="line"><span class="comment">        ofType：表示该属性所对应的集合中存储数据的类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;emp_Name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmp&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptAndEmp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DeptMapper.class);</span><br><span class="line">    <span class="type">Dept</span> <span class="variable">deptAndEmp</span> <span class="operator">=</span> mapper.getDeptAndEmp(<span class="number">1</span>);</span><br><span class="line">    System.out.println(deptAndEmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>方式二：分步查询</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询查询部门以及部门中所有员工的信息</span></span><br><span class="line"><span class="comment"> * 分步查询第一步：查询部门信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Dept <span class="title function_">getDeptAndEmpByStepOne</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer did)</span>;</span><br></pre></td></tr></table></figure>

<p>在Dept中创建对应着emp的集合</p>
<p>接口配置文件</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptAndEmpByStepResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;deptName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dept_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.hua.mybatis.mapper.EmpMapper.getDeptAndEmpByStepTwo&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptAndEmpByStepOne(@Param(&quot;did&quot;) Integer did)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepOne&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptAndEmpByStepResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过分步查询查询部门以及部门中所有员工的信息</span></span><br><span class="line"><span class="comment"> * 分步查询第二步：根据did查询员工信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getDeptAndEmpByStepTwo</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure>

<p>   接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTwo(@Param(&quot;did&quot;) Integer id)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptAndEmpByStepTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>   测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetDeptAndEmpByStep</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">DeptMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DeptMapper.class);</span><br><span class="line">    <span class="type">Dept</span> <span class="variable">deptAndEmp</span> <span class="operator">=</span> mapper.getDeptAndEmpByStepOne(<span class="number">1</span>);</span><br><span class="line">    System.out.println(deptAndEmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="九、动态SQL"><a href="#九、动态SQL" class="headerlink" title="九、动态SQL"></a>九、动态SQL</h2><p>动态SQL功能：帮助我们实现sql语句的拼接，主要是拼接关键字和条件</p>
<h3 id="1、if标签"><a href="#1、if标签" class="headerlink" title="1、if标签"></a>1、if标签</h3><p>if标签可以通过属性test的表达式来进行判断，如果表达式的结果为true，则标签内容执行，否则不执行。</p>
<p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpCondition</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.DynamicSQLMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--List&lt;Emp&gt; getEmpCondition(Emp emp)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加1 = 1的原因，如果第一个if不成立，执行第二个if的时候会多一个and1--&gt;</span></span><br><span class="line">        select * from t_emp where 1 = 1</span><br><span class="line">        <span class="comment">&lt;!--如果没有传参数则默认是null或者是空字符串--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态sql</span></span><br><span class="line"><span class="comment"> * 1、if：根据标签中test属性所对应的表达式决定标签中的内容是否需要拼接到SQL中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamic</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    List&lt;Emp&gt; emp = mapper.getEmpCondition(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>));</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、where标签"><a href="#2、where标签" class="headerlink" title="2、where标签"></a>2、where标签</h3><p>where：当where标签中有内容时，会自动生成where关键字，并且将<strong>内容前</strong>多余的and 或 or去掉</p>
<ul>
<li>当where标签没有内容时，此时where标签没有任何效果</li>
<li>注意：where标签不能将其中内容后面的多余的and 或 or 去掉</li>
</ul>
<p>与if相比，只有接口配置文件有变化</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="comment">&lt;!--如果where里面有内容使用where标签能自动的生成where关键字，能够自动的去除and/or关键字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有传参数则默认是null或者是空字符串--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、trim标签"><a href="#3、trim标签" class="headerlink" title="3、trim标签"></a>3、trim标签</h3><p>若标签中有内容时：</p>
<ul>
<li>perfix&#x2F;suffix:将trim标签中内容前面或后面添加指定内容</li>
<li>suffixOverrides&#x2F;prefixOverrides:将trim标签中内容前面或后面去掉指定内容</li>
</ul>
<p>若标签中没有内容时：trim标签也没有任何效果</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果没有传参数则默认是null或者是空字符串--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            emp_name = #&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            email = #&#123;email&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、choose-when-otherwise"><a href="#4、choose-when-otherwise" class="headerlink" title="4、choose,when,otherwise"></a>4、choose,when,otherwise</h3><p>choose,when,otherwise 相当于if…else if…else..,只会执行一个</p>
<ul>
<li>when:至少有一个，otherwise至多有一个</li>
<li>choose是父标签</li>
</ul>
<p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试choose when  otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpByChoose</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    emp_name = #&#123;empName&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    age = #&#123;age&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    sex = #&#123;sex&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    email = #&#123;email&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                    did = 1</span><br><span class="line">                <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetEmpByChoose</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    List&lt;Emp&gt; emp = mapper.getEmpByChoose(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">    System.out.println(emp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、foreach"><a href="#5、foreach" class="headerlink" title="5、foreach"></a>5、foreach</h3><p>foreach就是用来循环遍历的，foreach标签的属性</p>
<p>collection:设置需要循环的数组或集合<br>item：表示数组或集合中每一个数据<br>separator：循环体之间的分隔符<br>open：foreach标签所循环的所有内容的开始符<br>close：foreach标签所循环的所有内容的结束符</p>
<ol>
<li><p>foreach标签用在数组上面</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过数组实现批量删除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMoreByArray</span><span class="params">(<span class="meta">@Param(&quot;eids&quot;)</span> Integer[] eids)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(Integer[] eids)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        delete form t_emp where eid in</span></span><br><span class="line"><span class="comment">        &lt;foreach collection=&quot;eids&quot; item=&quot;eid&quot; separator=&quot;,&quot; close=&quot;)&quot; open=&quot;(&quot;&gt;</span></span><br><span class="line"><span class="comment">           #&#123;eid&#125;</span></span><br><span class="line"><span class="comment">        &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    delete from t_emp where</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        collection:是对应的参数Param</span></span><br><span class="line"><span class="comment">        item：是遍历的每一个</span></span><br><span class="line"><span class="comment">        separator:是分隔符</span></span><br><span class="line"><span class="comment">        open：是开始符号</span></span><br><span class="line"><span class="comment">        close：是结束符号</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">        eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteMoreByAray</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.deleteMoreByArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">7</span>,<span class="number">8</span>&#125;);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>foreach用在集合上面</p>
<p>接口代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过list集合实现批量添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertMoreByList</span><span class="params">(<span class="meta">@Param(&quot;emps&quot;)</span> List&lt;Emp&gt; emps)</span>;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreByList(List&lt;Emp&gt; emps)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreByList&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (null,#&#123;emp.empName&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testinsertMoreByList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">    <span class="type">DynamicSQLMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(DynamicSQLMapper.class);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a1&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a2&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="literal">null</span>,<span class="string">&quot;a3&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">    List&lt;Emp&gt; emps = Arrays.asList(emp1,emp2,emp3);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mapper.insertMoreByList(emps);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6、sql标签"><a href="#6、sql标签" class="headerlink" title="6、sql标签"></a>6、sql标签</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 声明sql片段：</span><br><span class="line">*     &lt;!--sql片段--&gt;</span><br><span class="line">*     &lt;sql id=<span class="string">&quot;empColumns&quot;</span>&gt;eid,emp_name,age,sex,email&lt;/sql&gt;</span><br><span class="line">* 使用sql片段：</span><br><span class="line">*     &lt;include refid=<span class="string">&quot;empColumns&quot;</span>&gt;&lt;/include&gt;</span><br></pre></td></tr></table></figure>

<h2 id="十、MyBatis的缓存"><a href="#十、MyBatis的缓存" class="headerlink" title="十、MyBatis的缓存"></a>十、MyBatis的缓存</h2><p>缓存只针对查询功能有效</p>
<h3 id="1、MyBatis的一级缓存"><a href="#1、MyBatis的一级缓存" class="headerlink" title="1、MyBatis的一级缓存"></a>1、MyBatis的一级缓存</h3><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存下来，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问。一级缓存是自动开启的</p>
<p>一级缓存失效的情况</p>
<ol>
<li><p>不同的SqlSession对应不同的一级缓存</p>
</li>
<li><p>同一个SqlSession但是查询的条件不同</p>
</li>
<li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p>
</li>
<li><p>同一个SqlSession两次查询期间手动清空了缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//清除一级缓存</span><br><span class="line">sqlSession1.clearCache();</span><br></pre></td></tr></table></figure></li>
</ol>
<p>举例：</p>
<p>接口代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CacheMapper</span> &#123;</span><br><span class="line">    Emp <span class="title function_">getEmpByEid</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hua.mybatis.mapper.CacheMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Emp getEmpByEid(@Param(&quot;eid&quot;) Integer eid)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByEid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">        <span class="type">CacheMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp1</span> <span class="operator">=</span> mapper1.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(emp1);</span><br><span class="line">        <span class="type">CacheMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession1.getMapper(CacheMapper.class);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp2</span> <span class="operator">=</span> mapper2.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(emp2);</span><br><span class="line"></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> SQLSessionUtils.getSQLSession();</span><br><span class="line">        <span class="type">CacheMapper</span> <span class="variable">mapper3</span> <span class="operator">=</span> sqlSession2.getMapper(CacheMapper.class);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">empByEid</span> <span class="operator">=</span> mapper3.getEmpByEid(<span class="number">1</span>);</span><br><span class="line">        System.out.println(empByEid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<p>DEBUG 04-14 11:24:47,487 &#x3D;&#x3D;&gt;  Preparing: select * from t_emp where eid &#x3D; ? (BaseJdbcLogger.java:137)<br>DEBUG 04-14 11:24:47,506 &#x3D;&#x3D;&gt; Parameters: 1(Integer) (BaseJdbcLogger.java:137)<br>DEBUG 04-14 11:24:47,521 &lt;&#x3D;&#x3D;      Total: 1 (BaseJdbcLogger.java:137)<br>Emp{eid&#x3D;1, empName&#x3D;’张三’, age&#x3D;1, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#x31;&#50;&#x33;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;">&#x31;&#50;&#x33;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;</a>‘, dept&#x3D;null}<br>Emp{eid&#x3D;1, empName&#x3D;’张三’, age&#x3D;1, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#49;&#50;&#51;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;">&#49;&#50;&#51;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>‘, dept&#x3D;null}<br>DEBUG 04-14 11:24:47,593 &#x3D;&#x3D;&gt;  Preparing: select * from t_emp where eid &#x3D; ? (BaseJdbcLogger.java:137)<br>DEBUG 04-14 11:24:47,594 &#x3D;&#x3D;&gt; Parameters: 1(Integer) (BaseJdbcLogger.java:137)<br>DEBUG 04-14 11:24:47,595 &lt;&#x3D;&#x3D;      Total: 1 (BaseJdbcLogger.java:137)<br>Emp{eid&#x3D;1, empName&#x3D;’张三’, age&#x3D;1, sex&#x3D;’男’, email&#x3D;‘<a href="mailto:&#x31;&#x32;&#51;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#x31;&#x32;&#51;&#x40;&#113;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a>‘, dept&#x3D;null}</p>
<h3 id="2、MyBatis二级缓存"><a href="#2、MyBatis二级缓存" class="headerlink" title="2、MyBatis二级缓存"></a>2、MyBatis二级缓存</h3><p>二级缓存是SqlSessionFactory级别的，通过一个SqlSessionFactory创建的SqlSession查询的结果会被缓存，此后若再执行相同的查询语句，结果就会从缓存中取</p>
<p>二级缓存开启的条件</p>
<ol>
<li><p>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;true，默认为true，不需要设置</p>
</li>
<li><p>在映射文件中设置标签<cache/></p>
</li>
<li><p>二级缓存必须在SqlSession(一级缓存)关闭或提交之后有效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlSession1.commit();</span><br><span class="line">sqlSession1.close();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询的数据所转换的实体类类型必须实现序列化的接口</p>
</li>
</ol>
<p>使二级缓存失效的情况</p>
<p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p>
<p>缓存仅仅调用增删改时刷新</p>
<h3 id="3、二级缓存的相关配置"><a href="#3、二级缓存的相关配置" class="headerlink" title="3、二级缓存的相关配置"></a>3、二级缓存的相关配置</h3><ul>
<li><p>eviction属性：缓存回收策略</p>
<p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。<br>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。<br>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。<br>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。<br>默认的是 LRU。</p>
</li>
<li><p>flushInterval属性：刷新间隔，单位毫秒</p>
<p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p>
</li>
<li><p>size属性：引用数目，正整数</p>
<p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p>
</li>
<li><p>readOnly属性：只读，true&#x2F;false</p>
<p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了<br>很重要的性能优势。<br>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是<br>false。</p>
</li>
</ul>
<h3 id="4、MyBatis缓存查询的顺序"><a href="#4、MyBatis缓存查询的顺序" class="headerlink" title="4、MyBatis缓存查询的顺序"></a>4、MyBatis缓存查询的顺序</h3><ul>
<li>先查询二级缓存，因为二级缓存可能有其他程序已经查询出来的结果，可以拿来直接使用。</li>
<li>如果二级缓存没有命中，再查询一级缓存</li>
<li>如果一级缓存也没有命中，则查询数据库</li>
<li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li>
</ul>
<h3 id="5、整合第三方缓存EHCache"><a href="#5、整合第三方缓存EHCache" class="headerlink" title="5、整合第三方缓存EHCache"></a>5、整合第三方缓存EHCache</h3><ol>
<li><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>各jar包的功能</p>
<table>
<thead>
<tr>
<th>jar包名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mybatis-ehcache</td>
<td>Mybatis和EHCache的整合包</td>
</tr>
<tr>
<td>ehcache</td>
<td>EHCache核心包</td>
</tr>
<tr>
<td>slf4j-api</td>
<td>SLF4J日志门面包</td>
</tr>
<tr>
<td>logback-classic</td>
<td>支持SLF4J门面接口的一个具体实现</td>
</tr>
</tbody></table>
</li>
<li><p>创建EHChache的配置文件ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 磁盘保存路径,将缓存保存到磁盘上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置二级缓存的类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>加入logback日志</p>
<p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。<br>创建logback的配置文件logback.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger]</span><br><span class="line">        [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="十一、MyBatis的逆向工程"><a href="#十一、MyBatis的逆向工程" class="headerlink" title="十一、MyBatis的逆向工程"></a>十一、MyBatis的逆向工程</h2><ul>
<li>正向工程：先创建java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的</li>
<li>反向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源<ul>
<li>java实体类</li>
<li>Mapper接口</li>
<li>Mapper映射文件</li>
</ul>
</li>
</ul>
<h3 id="1、创建逆向工程的步骤"><a href="#1、创建逆向工程的步骤" class="headerlink" title="1、创建逆向工程的步骤"></a>1、创建逆向工程的步骤</h3><h4 id="a、添加依赖和插件"><a href="#a、添加依赖和插件" class="headerlink" title="a、添加依赖和插件"></a>a、添加依赖和插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="b、创建MyBatis的核心配置文件"><a href="#b、创建MyBatis的核心配置文件" class="headerlink" title="b、创建MyBatis的核心配置文件"></a>b、创建MyBatis的核心配置文件</h4><h4 id="c、创建逆向工程的配置文件"><a href="#c、创建逆向工程的配置文件" class="headerlink" title="c、创建逆向工程的配置文件"></a>c、创建逆向工程的配置文件</h4><p>文件名必须是：generatorConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">            MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">            MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">password</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- javaBean的生成策略,就是实体类的生成策略--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.hua.mybatis.pojo&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否生成子包--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--去除字符串前后空格，将字段名转为属性，有空格就去掉--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.hua.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.hua.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="d、执行MBG插件的generate"><a href="#d、执行MBG插件的generate" class="headerlink" title="d、执行MBG插件的generate"></a>d、执行MBG插件的generate</h4><p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/2.png"></p>
<h3 id="2、测试奢华尊享版"><a href="#2、测试奢华尊享版" class="headerlink" title="2、测试奢华尊享版"></a>2、测试奢华尊享版</h3><p>在配置文件中修改为奢华尊享版</p>
<p>下面的为QBC查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MBGTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line">            <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">            <span class="comment">//查询所有数据</span></span><br><span class="line"><span class="comment">//            List&lt;Emp&gt; list = mapper.selectByExample(null);</span></span><br><span class="line"><span class="comment">//            for(Emp emp : list)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(emp);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据条件查询</span></span><br><span class="line"><span class="comment">//            EmpExample empExample = new EmpExample();</span></span><br><span class="line"><span class="comment">//            empExample.createCriteria().andEmpNameEqualTo(&quot;张三&quot;).andAgeEqualTo(1);</span></span><br><span class="line"><span class="comment">//            empExample.or().andDidIsNotNull();</span></span><br><span class="line"><span class="comment">//            List&lt;Emp&gt; list = mapper.selectByExample(empExample);</span></span><br><span class="line"><span class="comment">//            for(Emp emp : list)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(emp);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//修改</span></span><br><span class="line">            <span class="comment">//普通修改:有null值也会修改</span></span><br><span class="line"><span class="comment">//            mapper.updateByPrimaryKey(new Emp(1,&quot;admin&quot;,22,null,&quot;@456.com&quot;,2));</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//选择修改：有null值，则该字段不修改</span></span><br><span class="line">            mapper.updateByPrimaryKeySelective(<span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;@456.com&quot;</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十二、分页插件"><a href="#十二、分页插件" class="headerlink" title="十二、分页插件"></a>十二、分页插件</h2><h3 id="1、分页插件使用步骤"><a href="#1、分页插件使用步骤" class="headerlink" title="1、分页插件使用步骤"></a>1、分页插件使用步骤</h3><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、配置分页插件"><a href="#2、配置分页插件" class="headerlink" title="2、配置分页插件"></a>2、配置分页插件</h4><p>在MyBatis的核心配置文件中配置插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、分页插件的使用"><a href="#2、分页插件的使用" class="headerlink" title="2、分页插件的使用"></a>2、分页插件的使用</h3><p>a&gt;在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能<br>        pageNum：当前页的页码<br>        pageSize：每页显示的条数<br>b&gt;在查询获取list集合之后，使用PageInfo<T> pageInfo &#x3D; new PageInfo&lt;&gt;(List<T> list, int<br>        navigatePages)获取分页相关数据<br>        list：分页之后的数据<br>        navigatePages：导航分页的页码数<br>c&gt;分页相关数据<br>        PageInfo{<br>        pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,<br>        list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,<br>        pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},<br>        prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,<br>        hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,<br>        navigatepageNums&#x3D;[4, 5, 6, 7, 8]<br>        }<br>常用数据：<br>        pageNum：当前页的页码<br>        pageSize：每页显示的条数<br>        size：当前页显示的真实条数<br>        total：总记录数<br>        pages：总页数<br>        prePage：上一页的页码<br>        nextPage：下一页的页码</p>
<p>​        isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页<br>​        hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页<br>​        navigatePages：导航分页的页码数<br>​        navigatepageNums：导航分页的页码，[1,2,3,4,5]</p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Optional</title>
    <url>/2023/12/18/Optional/</url>
    <content><![CDATA[<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>        在编写代码的时候出现最多的就是空指针异常，所以在很多情况下我们需要做各种非空的判断，在<code>JDK1.8</code>之后，通过<code>Optional</code>我们可以写出更优雅的代码来避免空指针异常</p>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><h3 id="2-1-创建对象"><a href="#2-1-创建对象" class="headerlink" title="2.1 创建对象"></a>2.1 创建对象</h3><p>        <code>Optional</code>就好像是包装类，可以把我们的具体数据封装<code>Optional</code>对象内部，然后再去使用<code>Optional</code>中封装好的方法操作封装进去的数据就可以避免空指针异常</p>
<p>        一般使用<code>Optional</code>的静态方法<code>ofNullable</code>来把数据封装成一个<code>Optional</code>对象，无论传入的参数是否为<code>null</code>都不会出现问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> getAuthor();</span><br><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(author);</span><br></pre></td></tr></table></figure>

<p>        如果确定一个对象不是空的则可以使用<code>Optional</code>的静态方法<code>of</code>来把数据封装成<code>Optional</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>();</span><br><span class="line">Optional&lt;Author&gt; authorOptional = Optional.of(author);</span><br></pre></td></tr></table></figure>

<p>       如果一个对象是<code>null</code>，这个时候需要将<code>null</code>封装成一个<code>Optional</code>对象返回，可以使用<code>Optional</code>的静态方法<code>empty</code>来进行封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional.empty()</span><br></pre></td></tr></table></figure>

<h3 id="2-2-安全消费值"><a href="#2-2-安全消费值" class="headerlink" title="2.2 安全消费值"></a>2.2 安全消费值</h3><p>        当获取到一个<code>Optional</code>对象后可以使用<code>ifPresent</code>方法消费其中的值，这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor());</span><br><span class="line">authorOptional.ifPresent(author -&gt; System.out.println(author.getName());</span><br></pre></td></tr></table></figure>

<h3 id="2-3-获取值"><a href="#2-3-获取值" class="headerlink" title="2.3 获取值"></a>2.3 获取值</h3><p>        不推荐直接使用<code>get</code>方法获取值，因为当<code>Optional</code>内部的数据为空时会出现异常</p>
<h3 id="2-4-安全获取值"><a href="#2-4-安全获取值" class="headerlink" title="2.4 安全获取值"></a>2.4 安全获取值</h3><ul>
<li><p><code>orElseGet</code>：获取数据并且设置为空时的默认值。如果数据不为空就能获取到该数据，如果为空则根据传入的参数来创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor));</span><br><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> authorOptional.orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">Author</span>());</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>orElseThrow</code></p>
<p>获取数据，如果数据不为空就能获取到该数据，如果为空则根据传入的参数来创建异常抛出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor));</span><br><span class="line"><span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> authorOptional.orElseThrow((Supplier&lt;Throwable&gt;) ()</span><br><span class="line">-&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;author为空&quot;</span>));</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-5-过滤"><a href="#2-5-过滤" class="headerlink" title="2.5 过滤"></a>2.5 过滤</h3><p>        可以使用<code>filter</code>方法对数据进行过滤，如果原本是有数据的，但是不符合判断，也会变成一个无数据的<code>Optional</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor));</span><br><span class="line">authorOptional.filter(author -&gt; author.getAge() &gt; <span class="number">100</span>).ifPresent(</span><br><span class="line">    author -&gt; System.out.println(author.getAge())</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-6-判断"><a href="#2-6-判断" class="headerlink" title="2.6 判断"></a>2.6 判断</h3><p>        可以使用<code>isPresent</code>方法判断数据是否存在，如果为空返回值为<code>false</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor));</span><br><span class="line"><span class="keyword">if</span>(authorOptional.isPresent())&#123;</span><br><span class="line">    System.out.println(authorOptional.get().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-数据转换"><a href="#2-7-数据转换" class="headerlink" title="2.7 数据转换"></a>2.7 数据转换</h3><p>        <code>Optional</code>还提供了<code>map</code>可以让我们对数据进行转换，并且得到的数据也还是被<code>Optional</code>包装好的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Author&gt; authorOptional = Optional.ofNullable(getAuthor));</span><br><span class="line">Optional&lt;List&lt;Book&gt;&gt; books = authorOptional.map(author -&gt; author.getBooks())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream高级用法</title>
    <url>/2023/12/23/Stream%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Stream高级用法"><a href="#Stream高级用法" class="headerlink" title="Stream高级用法"></a>Stream高级用法</h1><h2 id="1-基本数据类型优化"><a href="#1-基本数据类型优化" class="headerlink" title="1. 基本数据类型优化"></a>1. 基本数据类型优化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Authors&gt; authors = getAuthors();</span><br><span class="line">authors.stream</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">        .filter(age -&gt; age &gt; <span class="number">10</span>)    </span><br><span class="line">        .map(age -&gt; age + <span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>问题：在对<code>age</code>进行加减比较操作的时候，首先需要转换为<code>Integer</code>类型，然后进行一些操作，操作完毕之后还需要转换为<code>Integer</code>类型，在数据量较大的时候需要耗费较大的时间。</p>
</li>
<li><p>优化：<code>mapToInt、mapToLong、mapToDouble、flatMapToInt、flatMapToDouble</code>等</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Authors&gt; authors = getAuthors();</span><br><span class="line">authors.stream</span><br><span class="line">        .mapToInt(author -&gt; author.getAge())<span class="comment">//经历这一步之后流中元素都是int类型</span></span><br><span class="line">        .map(age -&gt; age + <span class="number">10</span>)</span><br><span class="line">        .filter(age -&gt; age &gt; <span class="number">10</span>)    </span><br><span class="line">        .map(age -&gt; age + <span class="number">2</span>)</span><br><span class="line">        .forEach(System.out::println)</span><br></pre></td></tr></table></figure>

<h2 id="2-并行流"><a href="#2-并行流" class="headerlink" title="2. 并行流"></a>2. 并行流</h2><p>        当流中有大量元素的时候，我们可以使用并行流去提高操作的效率，本质就是把任务分配给多个线程去完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> stream.filter(num -&gt; num &gt; <span class="number">5</span>)</span><br><span class="line">        .reduce((res,ele) -&gt; res + ele)<span class="comment">//结果是Optional类型</span></span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure>

<p>优化：<code>parallel</code>可以将串行流变为并行流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> stream.parallel() <span class="comment">//变为并行流</span></span><br><span class="line">        .filter(num -&gt; num &gt; <span class="number">5</span>)</span><br><span class="line">        .reduce((res,ele) -&gt; res + ele)<span class="comment">//结果是Optional类型</span></span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>拍摄模式与构图</title>
    <url>/2023/12/10/%E6%8B%8D%E6%91%84%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="拍摄模式与构图"><a href="#拍摄模式与构图" class="headerlink" title="拍摄模式与构图"></a>拍摄模式与构图</h1><h2 id="1-常用模式"><a href="#1-常用模式" class="headerlink" title="1. 常用模式"></a>1. 常用模式</h2><ul>
<li><p>Auto：全自动模式，所有参数自己不可调节</p>
</li>
<li><p>P-程序曝光：可以调节感光度，其余两个不可</p>
</li>
<li><p>A&#x2F;AV-光圈优先：可以调节光圈或者感光度(主)</p>
</li>
<li><p>S&#x2F;TV-快门优先：可以调节快门和感光度，主要用于抓拍</p>
</li>
<li><p>M-手动曝光：三个参数都可调节</p>
</li>
</ul>
<h2 id="2-背景虚化"><a href="#2-背景虚化" class="headerlink" title="2. 背景虚化"></a>2. 背景虚化</h2><p>核心四要素</p>
<ul>
<li><p>背景离主体远</p>
</li>
<li><p>相机离主体近</p>
</li>
<li><p>光圈较大</p>
</li>
<li><p>焦距较长</p>
</li>
</ul>
<h2 id="3-构图核心"><a href="#3-构图核心" class="headerlink" title="3. 构图核心"></a>3. 构图核心</h2><ol>
<li><p><strong>确认画面主体或主题</strong></p>
</li>
<li><p>去掉画面中与主题或主体无关的元素</p>
</li>
<li><p>加入突出主体或主体表达的元素并合理摆放</p>
</li>
</ol>
<h2 id="4-构图法则"><a href="#4-构图法则" class="headerlink" title="4. 构图法则"></a>4. 构图法则</h2><ol>
<li><p>视觉凝聚</p>
<ul>
<li><p>明亮的部分吸引视觉</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji2.jpg"></p>
</li>
<li><p>鲜艳&#x2F;对比色的部分吸引视觉</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji3.jpg"></p>
</li>
<li><p>清晰的地方更吸引视觉</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji4.jpg"></p>
</li>
</ul>
</li>
<li><p>视觉引导</p>
<ul>
<li><p>引导线:可以有形、可以无形</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji5.jpg"></p>
</li>
<li><p>视线</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji6.jpg"></p>
</li>
</ul>
</li>
<li><p>三分法：</p>
<p>人像:人物更多在三分线焦点上，人物看的方向应该留白，留白处可稍微点缀</p>
<p>景像:物体与水面交际线在三分线</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji7.jpg"></p>
</li>
<li><p>居中法：左右对称 (正式场合、庄严)</p>
</li>
<li><p>三角形构图：三个物体连成三角形</p>
</li>
<li><p>层次构图：前中后景</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji8.jpg"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>拍摄指南</title>
    <url>/2023/12/17/%E6%8B%8D%E6%91%84%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="拍摄指南"><a href="#拍摄指南" class="headerlink" title="拍摄指南"></a>拍摄指南</h1><h2 id="1-好照片定义"><a href="#1-好照片定义" class="headerlink" title="1. 好照片定义"></a>1. 好照片定义</h2><ul>
<li><p>有明确的主题</p>
</li>
<li><p>突出的主体&#x2F;兴趣点</p>
</li>
<li><p>简洁的画面&#x2F;好看的形式</p>
</li>
<li><p>细节完成度高</p>
</li>
</ul>
<h2 id="2-优秀作品论坛"><a href="#2-优秀作品论坛" class="headerlink" title="2. 优秀作品论坛"></a>2. 优秀作品论坛</h2><ul>
<li><p>500PX.ME</p>
</li>
<li><p>35PHOTO.PRO</p>
</li>
<li><p>1X.COM</p>
</li>
</ul>
<h2 id="3-照片分析要点"><a href="#3-照片分析要点" class="headerlink" title="3. 照片分析要点"></a>3. 照片分析要点</h2><ol>
<li><p>内容</p>
<ul>
<li>内容&#x2F;观感</li>
</ul>
</li>
<li><p>形式</p>
<ul>
<li><p>视觉引导</p>
<ul>
<li><p>引导线</p>
</li>
<li><p>明暗引导</p>
</li>
</ul>
</li>
<li><p>影调(明暗)</p>
</li>
<li><p>色彩(色调)</p>
<ul>
<li><p>色彩倾向：低饱和 冷色</p>
</li>
<li><p>色彩搭配：单色 不同明度的蓝色</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>技巧</p>
<ul>
<li><p>策划：主题、时间、天气、地点</p>
</li>
<li><p>前期：器材、取景构图、曝光、光线、虚实</p>
</li>
<li><p>后期：合成、曲线、磨皮</p>
</li>
</ul>
</li>
<li><p>器材</p>
</li>
</ol>
<h2 id="4-自然风光拍摄"><a href="#4-自然风光拍摄" class="headerlink" title="4. 自然风光拍摄"></a>4. 自然风光拍摄</h2><ol>
<li><p>风光摄影拍摄流程(部分)</p>
<ul>
<li>确定目的地、机位、机位适合的天气</li>
</ul>
</li>
<li><p>技巧与题材</p>
<ul>
<li><p>通用参数套路</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji18.jpg"></p>
</li>
<li><p>题材</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji19.jpg"></p>
</li>
</ul>
</li>
</ol>
<h2 id="5-城市风光"><a href="#5-城市风光" class="headerlink" title="5. 城市风光"></a>5. 城市风光</h2><ol>
<li><p>参数和自然风光一致</p>
</li>
<li><p>如何拍摄出好看的星芒</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji20.jpg"></p>
<ul>
<li>小光圈：F11以上</li>
</ul>
</li>
<li><p>如何拍摄好看的长曝光？</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji21.jpg"></p>
<ul>
<li><p>以车轨为例</p>
<ul>
<li><p>曝光时间尽量较长：让车轨可以铺满画面</p>
</li>
<li><p>尽量多拍摄几张：方便后期挑选和堆栈</p>
</li>
<li><p>多次拍摄来车方向</p>
</li>
<li><p>可以搭配ND镜使用</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="6-人像"><a href="#6-人像" class="headerlink" title="6. 人像"></a>6. 人像</h2><ol>
<li><p>技巧</p>
<ul>
<li><p>通用参数套路</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/%E7%9B%B8%E6%9C%BA22.jpg"></p>
</li>
<li><p>善于利用道具、前景、光线</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/12/09/Redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="1-NoSQL数据库简介"><a href="#1-NoSQL数据库简介" class="headerlink" title="1. NoSQL数据库简介"></a>1. NoSQL数据库简介</h2><h3 id="1-1-技术发展"><a href="#1-1-技术发展" class="headerlink" title="1.1 技术发展"></a>1.1 技术发展</h3><ol>
<li><p>解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVM</p>
</li>
<li><p>解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p>
</li>
<li><p>解决性能的问题：NoSQL、Java线程、Hadoop、Ngin、MQ、ElasticSearch</p>
</li>
</ol>
<h3 id="1-2-NoSQL数据库概述"><a href="#1-2-NoSQL数据库概述" class="headerlink" title="1.2 NoSQL数据库概述"></a>1.2 NoSQL数据库概述</h3><ol>
<li><p>NoSQL(Not Only SQL),意即不仅仅是SQL，泛指非关系型数据库，NoSQL不依赖业务逻辑方式存储，而是以简单的key-value模式存储，因此大大的增加了数据库的扩展能力</p>
<ul>
<li><p>不遵循SQL标准</p>
</li>
<li><p>不支持ACID</p>
</li>
<li><p>远超于SQL的性能</p>
</li>
</ul>
</li>
<li><p>NoSQL使用场景</p>
<ul>
<li><p>对数据高并发读写</p>
</li>
<li><p>海量数据的读写</p>
</li>
<li><p>对数据高可扩展性</p>
</li>
</ul>
</li>
<li><p>NoSQL不适用场景</p>
<ul>
<li><p>需要事务支持</p>
</li>
<li><p>基于sql的结构化查询，处理复杂的关系</p>
</li>
</ul>
</li>
</ol>
<h2 id="2-Redis概述"><a href="#2-Redis概述" class="headerlink" title="2. Redis概述"></a>2. Redis概述</h2><ul>
<li><p>redis是一个开源的<strong>key-value</strong>存储系统</p>
</li>
<li><p>和Memcached类似，它<strong>支持存储的value类型相对更多</strong>，包括string(字符串)、list(链表)、set(集合)、zset(sorted set 有序集合)和hash(哈希类型)</p>
</li>
<li><p>这些数据类型都支持push&#x2F;pop，add&#x2F;remove及取交集并集及更丰富的操作，而且这些操作都是<strong>原子性</strong>的</p>
</li>
<li><p>redis支持各种不同方式的<strong>排序</strong></p>
</li>
<li><p>与memcached一样，为了保证效率，数据都是<strong>缓存在内存</strong>中</p>
</li>
<li><p>区别的是redis会<strong>周期性</strong>的把更新的<strong>数据写入磁盘</strong>或者把修改操作写入追加的记录文件</p>
</li>
<li><p>实现了**master-slave(主从)**同步</p>
</li>
</ul>
<h3 id="2-1-Redis相关知识"><a href="#2-1-Redis相关知识" class="headerlink" title="2.1 Redis相关知识"></a>2.1 Redis相关知识</h3><ol>
<li><p>默认16个数据库，从下标0开始，初始默认使用0号库</p>
</li>
<li><p>使用<code>select &lt;dbid&gt;</code>来切换数据库，如select 8</p>
</li>
<li><p>统一密码管理，所有库密码相同</p>
</li>
<li><p>dbsize查看当前数据库的key的数量</p>
</li>
<li><p>flushdb清空当前库</p>
</li>
<li><p>flushall通杀全部库</p>
</li>
<li><p>Redis是单线程+多路IO复用技术</p>
</li>
</ol>
<h2 id="3-常用五大数据类型"><a href="#3-常用五大数据类型" class="headerlink" title="3. 常用五大数据类型"></a>3. 常用五大数据类型</h2><h3 id="3-1-Redis键-key"><a href="#3-1-Redis键-key" class="headerlink" title="3.1 Redis键(key)"></a>3.1 Redis键(key)</h3><p><code>keys *</code>查看当前库所有key</p>
<p><code>exists key</code>判断某个key是否存在</p>
<p><code>type key</code>查看key是什么类型</p>
<p><code>del key</code>删除指定的key数据</p>
<p><code>unlink key</code>根据value选择非阻塞删除，仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p>
<p><code>expire key 10</code>为指定的key设置过期时间10秒钟</p>
<p><code>ttl key</code>查看还有多少秒过期，-1表示永不过期，-2表示已过期</p>
<p><code>select</code>切换数据库</p>
<p><code>dbsize</code>查看当前数据库的key的数量</p>
<p><code>flushdb</code>清空当前库</p>
<p><code>flushall</code>通杀全部库 </p>
<h3 id="3-2-Redis字符串-String"><a href="#3-2-Redis字符串-String" class="headerlink" title="3.2 Redis字符串(String)"></a>3.2 Redis字符串(String)</h3><ol>
<li><p>简介</p>
<ul>
<li><p>String类型是二进制安全的，意味着Redis的string可以包含任何数据，比如jpg图片或者序列化的对象</p>
</li>
<li><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多是512M</p>
</li>
</ul>
</li>
<li><p>常用命令</p>
<ul>
<li><p><code>set &lt;Key&gt; &lt;value&gt;</code>：添加键值对</p>
</li>
<li><p><code>get &lt;Key&gt;</code>：查询对应键值</p>
</li>
<li><p><code>append &lt;key&gt; &lt;value&gt;</code>：将给定的value追加到原值末尾</p>
</li>
<li><p><code>strlen &lt;key&gt;</code>：获得值的长度</p>
</li>
<li><p><code>setnx &lt;key&gt; &lt;value&gt;</code>：只有key不存在时，设置key的值</p>
</li>
<li><p><code>incr &lt;key&gt;</code>：将key中存储的数字值加1，只能对数字值操作，如果为空，新增值为1</p>
</li>
<li><p><code>decr &lt;key&gt;</code>：将key中存储的数字值减一，只能对数字值操作，如果为空，新增值为-1</p>
</li>
<li><p><code>incrby/decrby &lt;key&gt;&lt;步长&gt;</code>：将key中存储的数字值增减，自定义步长</p>
</li>
<li><p><code>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;</code>：同时设置一个或多个key-value</p>
</li>
<li><p><code>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt;</code>：同时获取一个或多个value</p>
</li>
<li><p><code>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;</code>：同时设置一个或多个key-value对，当且仅当所有给定key都不存在</p>
<p>原子性，有一个失效都失败</p>
</li>
<li><p><code>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</code>：获得值的范围，类似java中的substring</p>
</li>
<li><p><code>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</code>：用value覆写key所存储的字符串值，从起始位置开始(索引从0开始)</p>
</li>
<li><p><code>setex &lt;key&gt;&lt;过期时间&gt;&lt;value&gt;</code>：设置键值的同时，设置过期时间，单位为秒</p>
</li>
<li><p><code>getset &lt;key&gt;&lt;value&gt;</code>：以新换旧，设置了新值的同时获得旧值</p>
</li>
</ul>
</li>
<li><p>原子性</p>
<ol>
<li><p>所谓原子操作是指不会被线程调度机制打断的操作，这种操作一旦开始，就一直运行到结束，中间不会切换到另一个线程。Redis单命令的原子性主要得益于Redis的单线程</p>
</li>
<li><p>在单线程中，能够在单条指令中完成的操作都可以认为是原子操作，因为中断只能发生于指令之间</p>
</li>
<li><p>在多线程中，不能被其他进程(线程)打断的操作就叫原子操作</p>
</li>
</ol>
</li>
<li><p>数据结构</p>
<ul>
<li>String的数据结构为简单动态字符串，是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配</li>
</ul>
</li>
</ol>
<h3 id="3-3-Redis列表-List"><a href="#3-3-Redis列表-List" class="headerlink" title="3.3  Redis列表(List)"></a>3.3  Redis列表(List)</h3><ol>
<li><p>简介</p>
<p>单键多值，Redis列表是简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部或者尾部，它的底层实际是一个<strong>双向链表</strong>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差</p>
</li>
<li><p>常用命令</p>
<ul>
<li><p><code>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt;..</code>：从左边&#x2F;右边插入一个或多个值，每次都是从左边放入</p>
</li>
<li><p><code>lpop/rpop &lt;key&gt;</code>：从左边&#x2F;右边吐出一个值，值在键在，值光键亡</p>
</li>
<li><p><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code>：从key1列表右边吐出一个值，插到key2列表左边</p>
</li>
<li><p><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code>：按照索引下标获得元素(从左到右)，<code>start=0,stop=-1</code>：表示获取所有</p>
</li>
<li><p><code>lindex &lt;key&gt;&lt;index&gt;</code>：按照索引下标获得元素(从左到右)</p>
</li>
<li><p><code>llen &lt;key&gt;</code>：获得列表长度</p>
</li>
<li><p><code>linsert &lt;key&gt; before &lt;value&gt; &lt;newvalue&gt;</code>：在value的前(后)面插入newvalue值</p>
</li>
<li><p><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>：从左边删除n个value(从左到右)</p>
</li>
<li><p><code>lset &lt;key&gt;&lt;index&gt;&lt;value&gt;</code>：将列表key下标为index的值替换为value</p>
</li>
</ul>
</li>
<li><p>数据结构</p>
<ul>
<li>List的数据结构为快速链表quickList。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存，当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间，比如列表里面存的只是int类型的数据，结构上还需要两个额外的指针prew和next。Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用，这样既满足了快速插入删除性能，又不会出现太大的空间冗余</li>
</ul>
</li>
</ol>
<h3 id="3-4-Redis集合-Set"><a href="#3-4-Redis集合-Set" class="headerlink" title="3.4 Redis集合(Set)"></a>3.4 Redis集合(Set)</h3><ol>
<li><p>简介</p>
<p>Redis set对外提供的功能和list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当需要存储一个列表数据，又不希望出现重复数据，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p>
<p>Redis的Set是string类型的无序集合，它底层其实是一个value为null的hash表，所以添加、删除、查找的复杂度都是O(1)</p>
</li>
<li><p>常用命令</p>
<ul>
<li><p><code>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt;</code>：将一个或多个元素加入到集合key中，已经存在的元素将被忽略</p>
</li>
<li><p><code>smembers &lt;key&gt;</code>：取出该集合的所有值</p>
</li>
<li><p><code>sismember &lt;key&gt; &lt;value&gt;</code>：判断集合key是否为含有value值，有1，没有0</p>
</li>
<li><p><code>scard &lt;key&gt;</code>：返回该集合的元素个数</p>
</li>
<li><p><code>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt;</code>：删除集合中的某个元素</p>
</li>
<li><p><code>spop &lt;key&gt;</code>：随机从该集合从吐出一个值</p>
</li>
<li><p><code>srandmember &lt;key&gt;&lt;n&gt;</code>：随机从该集合中取出n个值，不会从集合中删除</p>
</li>
<li><p><code>smove &lt;source&gt;&lt;destination&gt;value</code>：把集合中一个值从一个集合移动到另一个集合</p>
</li>
<li><p><code>sinter &lt;key1&gt;&lt;key2&gt;</code>：返回两个集合的交集元素</p>
</li>
<li><p><code>sunion &lt;key1&gt;&lt;key2&gt;</code>：返回两个集合的并集元素</p>
</li>
<li><p><code>sdiff &lt;key1&gt;&lt;key2&gt;</code>：返回两个集合的差集元素(key1中的，不包含key2中的)</p>
</li>
</ul>
</li>
<li><p>数据结构</p>
<p>Set数据结构是dict字典，字典是用哈希表实现的。Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值</p>
</li>
</ol>
<h3 id="3-5-Redis哈希-Hash"><a href="#3-5-Redis哈希-Hash" class="headerlink" title="3.5 Redis哈希(Hash)"></a>3.5 Redis哈希(Hash)</h3><ol>
<li><p>Redis hash是一个键值对集合，是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似java中的Map&lt;String,Object&gt;</p>
</li>
<li><p>主要的两种存储方式</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m21.jpg"></p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m22.jpg"></p>
</li>
<li><p>常用命令</p>
<ul>
<li><p><code>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>：给key集合中的field键赋值value</p>
</li>
<li><p><code>hget &lt;key1&gt;&lt;field&gt;</code>：从key1集合中取出value</p>
</li>
<li><p><code>hmset &lt;key1&gt;&lt;field&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;</code>：批量设置hash的值</p>
</li>
<li><p><code>hexists &lt;key1&gt;&lt;field&gt;</code>：查看哈希表key中，给定field是否存在</p>
</li>
<li><p><code>hkeys &lt;key&gt;</code>：列出该hash集合中的所有field</p>
</li>
<li><p><code>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;</code>：为哈希表key中的field的值增量1</p>
</li>
<li><p><code>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;</code>：将哈希表key中的域field的值设置为value，当且仅当域field不存在</p>
</li>
</ul>
</li>
<li><p>数据结构</p>
<p>Hash类型对应的数据结构是两种：ziplist(压缩列表)、hashtable(哈希表)。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable</p>
</li>
</ol>
<h3 id="3-6-Redis有序集合Zset"><a href="#3-6-Redis有序集合Zset" class="headerlink" title="3.6 Redis有序集合Zset"></a>3.6 Redis有序集合Zset</h3><ol>
<li><p>Redis有序集合zset与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合。不同之处是有序集合的每个成员都关联一个<strong>评分</strong>，这个评分被用来按照从低分到最高分的方式排序集合中的成员，<strong>集合中的成员是唯一的，但是评分是可以重复的</strong>。因为元素是有序的，所以可以很快的根据评分或者次序来获取一个范围的元素，访问有序集合的中间元素也是非常快的，因此可以把有序集合作为一个没有重复成员的智能列表</p>
</li>
<li><p>常用命令</p>
<ul>
<li><p><code>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;..</code>：将一个或多个member元素及其score值加入到有序集合key当中</p>
</li>
<li><p><code>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]</code>：返回有序集key中，下标在start stop之间的元素，WITHSCORES可以让分数一起和值返回到结果集</p>
</li>
<li><p><code>zrangebuscore key minmax[withscores][limit offset count]</code>：返回有序集key中，所有score值介于min和max之间(包括min和max)的成员，有序集成员按score值递增(从小到大)次序排序</p>
</li>
<li><p><code>zrevrangebyscore key maxmin [withscores][limit offset count]</code>：同上，改为从大到小排列</p>
</li>
<li><p><code>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;</code>：为元素的score加上增量</p>
</li>
<li><p><code>zrem &lt;key&gt;&lt;value&gt;</code>：删除该集合下，指定值的元素</p>
</li>
<li><p><code>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</code>：统计该集合，分数区间内的元素个数</p>
</li>
<li><p><code>zrank &lt;key&gt;&lt;value&gt;</code>：返回该值在集合中的排名，从0开始</p>
</li>
</ul>
</li>
<li><p>数据结构</p>
<p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String,Double&gt;,可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表</p>
<p>zset底层使用了两个数据结构：</p>
<ol>
<li><p>hash，hash的作用就是关联元素的value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值</p>
</li>
<li><p>跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表</p>
</li>
</ol>
</li>
<li><p>跳跃表</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m23.jpg"></p>
</li>
</ol>
<h2 id="4-Redis6的发布和订阅"><a href="#4-Redis6的发布和订阅" class="headerlink" title="4. Redis6的发布和订阅"></a>4. Redis6的发布和订阅</h2><ol>
<li><p>什么是发布和订阅</p>
<p>Redis发布订阅(pub&#x2F;sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息，Redis客户端可以订阅任意数量的频道</p>
</li>
<li><p>Redis的发布和订阅</p>
<ol>
<li><p>客户端可以订阅频道</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m24.jpg"></p>
</li>
<li><p>当给这个频道发布消息后，消息就会发送给订阅的客户端</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m25.jpg"></p>
</li>
</ol>
</li>
<li><p>发布订阅命令行实现</p>
<ol>
<li><p>打开一个客户端订阅channel1</p>
<p><code>SUBSCRIBE channel1</code></p>
</li>
<li><p>打开另一个客户端，给channel1发布消息hello</p>
<p><code>publish channel1 hello</code>返回订阅者的数量</p>
</li>
<li><p>打开另一个客户端可以看到发送的消息</p>
</li>
</ol>
</li>
</ol>
<h2 id="5-Redis6新数据类型"><a href="#5-Redis6新数据类型" class="headerlink" title="5.Redis6新数据类型"></a>5.Redis6新数据类型</h2><h3 id="5-1-Bitmaps"><a href="#5-1-Bitmaps" class="headerlink" title="5.1 Bitmaps"></a>5.1 Bitmaps</h3><ol>
<li><p>简介</p>
<p>Redis提供了Bitmaps这个数据类型可以实现对位的操作</p>
<ul>
<li><p>Bitmaps本身不是一种数据类型，实际上它就是字符串(key-value)，但是它可以对字符串的位进行操作</p>
</li>
<li><p>Bitmaps单独提供了一套命令，所以在Redis中使用Bitmaps和使用字符串的方法不太相同，可以把Bitmaps想象成一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标在Bitmaps中叫做偏移量</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m26.jpg"></p>
</li>
</ul>
</li>
<li><p>命令</p>
<ol>
<li><p><code>setbit &lt;key&gt;&lt;offset&gt;&lt;value&gt;</code>：设置Bitmaps中某个偏移量的值(0或1，offset偏移量从0开始)，注意：很多应用的用户id以一个指定数字(例如10000)开头，直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费，通常的做法是每次做setbit操作时将用户id减去这个指定的数字。在第一次初始化Bitmaps时，假如偏移量非常大，那么整个初始化过程执行会比较慢，可能造成Redis阻塞</p>
</li>
<li><p><code>getbit &lt;key&gt;&lt;offset&gt;</code>：获取Bitmaps中某个偏移量的值</p>
</li>
<li><p><code>bitcount &lt;key&gt;[start end]</code>：统计字符串从start字节到end字节比特值为1的数量</p>
</li>
<li><p><code>bitop and(or/not/xor) &lt;destkey&gt; [key..]</code>：bitop是一个复合操作，它可以做多个Bitmaps的交集，并集，非，异或操作，并将结果保存在destkey中</p>
</li>
</ol>
</li>
</ol>
<h3 id="5-2-HyperLogLog"><a href="#5-2-HyperLogLog" class="headerlink" title="5.2 HyperLogLog"></a>5.2 HyperLogLog</h3><ol>
<li><p>简介</p>
<ul>
<li><p>用来做基数统计的算法，优点是在输入元素的数量或者体积非常大时，计算基数所需的空间总是固定的、并且是很小的</p>
</li>
<li><p>在Redis中，每个HyperLogLog键只需要花费12KB内存，就可以计算接近2^64个不同元素的基数，这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比，但是因为HyperLogLog只会根据输入元素来计算基数，不会存储输入元素本身，所以不能像集合那样，返回输入的各个元素</p>
</li>
<li><p>什么是基数？比如数据集{1,3,5,7,7,8},那么这个数据集的基数集为</p>
</li>
</ul>
</li>
<li><p>命令</p>
<ol>
<li><p><code>pfadd &lt;key&gt;&lt;element&gt;[element..]</code>：添加指定元素到HyperLogLog中，如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0</p>
</li>
<li><p><code>pfcount &lt;key&gt;[key...]</code>：计算HLL的近似基数，可以计算多个HLL</p>
</li>
<li><p><code>pfmerge &lt;destkey&gt;&lt;sourcekey&gt;[sourcekey...]</code>：将一个或多个HLL合并后的结果存储在另一个HLL中</p>
</li>
</ol>
</li>
</ol>
<h3 id="5-3-Geospatial"><a href="#5-3-Geospatial" class="headerlink" title="5.3 Geospatial"></a>5.3 Geospatial</h3><ol>
<li><p>简介</p>
<p>Redis3.2增加了对GEO类型的支持。GEO,Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作</p>
</li>
<li><p>命令</p>
<ol>
<li><p><code>geoadd &lt;key&gt;&lt;longitude&gt;&lt;member&gt; [longitude latitude member..]</code>：添加地理位置(经度，纬度，名称)</p>
</li>
<li><p><code>geopos &lt;key&gt;&lt;member&gt;[member..]</code>：获得指定地区的坐标值</p>
</li>
<li><p><code>geodist &lt;key&gt;&lt;memmber1&gt;&lt;member2&gt; [m|km|ft|mi]</code>：获取两个位置之间的直线距离</p>
</li>
<li><p><code>georadius &lt;key&gt;&lt;longitude&gt;&lt;latitude&gt; radius m|km|ft|mi</code>：以给定的经纬度为中心找出某一半径内的元素</p>
</li>
</ol>
</li>
</ol>
<h2 id="6-Redis事务操作"><a href="#6-Redis事务操作" class="headerlink" title="6. Redis事务操作"></a>6. Redis事务操作</h2><h3 id="6-1-事务的定义"><a href="#6-1-事务的定义" class="headerlink" title="6.1 事务的定义"></a>6.1 事务的定义</h3><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序执行，事务在执行的过程中，不会被其他客户端发送来的命令请求打断。Redis事务的主要作用就是串联多个命令防止别的命令插队。</p>
<h3 id="6-2-Multi、Exec、discard"><a href="#6-2-Multi、Exec、discard" class="headerlink" title="6.2 Multi、Exec、discard"></a>6.2 Multi、Exec、discard</h3><ul>
<li>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，知道输入Exec后，Redis会将之前的命令队列中的命令依次执行，组队的过程中可以通过discard来放弃组队</li>
</ul>
<h3 id="6-3-事务的错误处理"><a href="#6-3-事务的错误处理" class="headerlink" title="6.3 事务的错误处理"></a>6.3 事务的错误处理</h3><ul>
<li><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</p>
</li>
<li><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚</p>
</li>
</ul>
<h3 id="6-4-事务冲突问题"><a href="#6-4-事务冲突问题" class="headerlink" title="6.4 事务冲突问题"></a>6.4 事务冲突问题</h3><ol>
<li><p>例子</p>
<p>一个请求想给金额减8000</p>
<p>一个请求想给金额减5000</p>
<p>一个请求想给金额减1000</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m27.jpg"></p>
</li>
<li><p>解决办法</p>
<ul>
<li><p>悲观锁</p>
</li>
<li><p>乐观锁</p>
</li>
</ul>
</li>
<li><p>悲观锁</p>
<p>每次拿数据的时候都会认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据都会block直到它拿到锁，传统的关系型数据库里面就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。缺点效率低</p>
</li>
<li><p>乐观锁</p>
<p>每次拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量，Redis就是利用这种check-and-set机制实现事务</p>
</li>
</ol>
<h3 id="6-5-WATCH-key-key…"><a href="#6-5-WATCH-key-key…" class="headerlink" title="6.5 WATCH key[key…]"></a>6.5 WATCH key[key…]</h3><ol>
<li>在执行multi之前，先执行watch key1[key2],可以监视一个(或多个)key,如果在事务执行之前这些key被其他命令所改动，那么事务将被打断</li>
</ol>
<h3 id="6-6-UNWATCH"><a href="#6-6-UNWATCH" class="headerlink" title="6.6 UNWATCH"></a>6.6 UNWATCH</h3><ol>
<li>取消WATCH命令对所有key的监视，如果在执行WATCH命令之后，EXEC命令或DISCARD命令先被执行了的话，那么就不需要再执行UNWATCH了</li>
</ol>
<h3 id="6-7-Redis事务三特性"><a href="#6-7-Redis事务三特性" class="headerlink" title="6.7 Redis事务三特性"></a>6.7 Redis事务三特性</h3><ol>
<li><p>单独的隔离操作</p>
<p>事务中的所有命令都会序列化，按顺序的执行，事务在执行的过程中，不会被其他客户端发送来的命令请求打断</p>
</li>
<li><p>没有隔离级别的概念</p>
<p>队列中的命令没有提交之前都不会被执行，因为事务提交前任何指令都不会被实际执行</p>
</li>
<li><p>不保证原子性</p>
<p>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</p>
</li>
</ol>
<h2 id="7-Redis持久化RDB"><a href="#7-Redis持久化RDB" class="headerlink" title="7 Redis持久化RDB"></a>7 Redis持久化RDB</h2><ul>
<li>什么是Redis持久化：Redis数据写入磁盘</li>
</ul>
<h3 id="7-1-Redis持久化的方式"><a href="#7-1-Redis持久化的方式" class="headerlink" title="7.1 Redis持久化的方式"></a>7.1 Redis持久化的方式</h3><ul>
<li><p>RDB(Redis DataBase)</p>
</li>
<li><p>AOF(Append Of File)</p>
</li>
</ul>
<h3 id="7-2-RDB简介"><a href="#7-2-RDB简介" class="headerlink" title="7.2 RDB简介"></a>7.2 RDB简介</h3><ul>
<li>在指定的时间间隔内将内存中的数据集快照写入磁盘</li>
</ul>
<h3 id="7-3-RDB是如何执行"><a href="#7-3-RDB是如何执行" class="headerlink" title="7.3 RDB是如何执行"></a>7.3 RDB是如何执行</h3><ol>
<li><p>Redis会单独创建(fork)一个子进程是进行持久化，会先将数据写入到一个<strong>临时文件</strong>中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件，整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能，如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那么RDB方式要比AOF方式更加的高效，RDB缺点是最后一次持久化后的数据可能丢失</p>
</li>
<li><p>Fork</p>
<ul>
<li><p>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据(变量、环境变量、程序计数器等)数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程</p>
</li>
<li><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，linux中引入了写时复制技术</p>
</li>
<li><p>一般情况父进程和子进程会公用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程</p>
</li>
</ul>
</li>
<li><p>持久化流程</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m28.jpg"></p>
</li>
<li><p>优缺点</p>
<ul>
<li><p>优点</p>
<ul>
<li><p>适合大规模的数据恢复</p>
</li>
<li><p>对数据完整性和一致性要求不高更适合使用</p>
</li>
<li><p>节省磁盘空间</p>
</li>
<li><p>恢复速度快</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><p>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</p>
</li>
<li><p>虽然Redis在fork时使用了写时拷贝技术，但是如果数据庞大时还是比较消耗性能</p>
</li>
<li><p>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="8-Redis持久化AOF"><a href="#8-Redis持久化AOF" class="headerlink" title="8. Redis持久化AOF"></a>8. Redis持久化AOF</h2><h3 id="8-1-AOF简介"><a href="#8-1-AOF简介" class="headerlink" title="8.1 AOF简介"></a>8.1 AOF简介</h3><ol>
<li><p>什么是AOF</p>
<p>以日志的形式来记录每个写操作(增量保存)，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就会根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
</li>
</ol>
<h3 id="8-2-AOF持久化流程"><a href="#8-2-AOF持久化流程" class="headerlink" title="8.2 AOF持久化流程"></a>8.2 AOF持久化流程</h3><ol>
<li><p>客户端的请求命令会被append追加到AOF缓冲区内</p>
</li>
<li><p>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中</p>
</li>
<li><p>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量</p>
</li>
<li><p>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的</p>
</li>
</ol>
<h3 id="8-3-AOF默认不开启"><a href="#8-3-AOF默认不开启" class="headerlink" title="8.3 AOF默认不开启"></a>8.3 AOF默认不开启</h3><ol>
<li><p>可以在redis.conf中配置文件名称，默认为appendonly.aof,AOF文件保存路径，同RDB的路径一致</p>
</li>
<li><p>AOF和RDB同时开启，系统默认取AOF的数据(数据不会存在丢失)</p>
</li>
</ol>
<h3 id="8-4-AOF启动-修复-恢复"><a href="#8-4-AOF启动-修复-恢复" class="headerlink" title="8.4 AOF启动&#x2F;修复&#x2F;恢复"></a>8.4 AOF启动&#x2F;修复&#x2F;恢复</h3><ul>
<li><p>AOF备份机制和性能虽然和RDB不同，但是备份和恢复的操作同RDB一样，都是拷贝备份文件，需要恢复时再拷贝到Redis工作目录下，启动系统加载</p>
</li>
<li><p>正常恢复</p>
<ul>
<li><p>修改默认的appendonly no，为yes</p>
</li>
<li><p>将有数据的aof文件复制一份保存到对应目录(查看目录：config get dir)</p>
</li>
<li><p>恢复：重启redis然后重新加载</p>
</li>
</ul>
</li>
<li><p>异常恢复</p>
<ul>
<li><p>修改默认的appendonly no，为yes</p>
</li>
<li><p>如遇到AOF文件损坏，通过&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-check-aof–fix appendonly.aof进行恢复</p>
</li>
<li><p>备份被写坏的AOF文件</p>
</li>
<li><p>恢复：重启redis，然后重新加载</p>
</li>
</ul>
</li>
</ul>
<h3 id="8-5-AOF同步频率设置"><a href="#8-5-AOF同步频率设置" class="headerlink" title="8.5 AOF同步频率设置"></a>8.5 AOF同步频率设置</h3><ul>
<li><p><code>appendfsync always</code>：始终同步，每次Redis的写入都会立刻记入日志，性能较差但数据完整性比较好</p>
</li>
<li><p><code>appendfsync everysec</code>：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失</p>
</li>
<li><p><code>appendfsync no</code>：redis不主动进行同步，把同步时机交给操作系统</p>
</li>
</ul>
<h3 id="8-6-Rewrite压缩"><a href="#8-6-Rewrite压缩" class="headerlink" title="8.6 Rewrite压缩"></a>8.6 Rewrite压缩</h3><ol>
<li><p>简介</p>
<p>AOF采用文件追加方式，文件会越来越大，为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时(当aof文件大小时上次rewrite后大小的一倍且文件大于64M时触发)，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令bgrewriteaof</p>
</li>
<li><p>重写原理</p>
<p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指把rdb的快照，以二进制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作</p>
</li>
</ol>
<h3 id="8-7-AOF的优缺点"><a href="#8-7-AOF的优缺点" class="headerlink" title="8.7 AOF的优缺点"></a>8.7 AOF的优缺点</h3><ol>
<li><p>优点</p>
<ul>
<li><p>备份机制更稳健，丢失数据概率更低</p>
</li>
<li><p>可读的日志文本，通过操作AOF稳健，可以处理误操作</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ol>
<li><p>比起RDB占用更多的磁盘空间</p>
</li>
<li><p>恢复备份速度要慢</p>
</li>
<li><p>每次读写都同步的话，有一定的性能压力</p>
</li>
<li><p>存在个别Bug，造成不能恢复</p>
</li>
</ol>
</li>
</ol>
<h2 id="9-Redis主从复制"><a href="#9-Redis主从复制" class="headerlink" title="9. Redis主从复制"></a>9. Redis主从复制</h2><h3 id="9-1-简介"><a href="#9-1-简介" class="headerlink" title="9.1 简介"></a>9.1 简介</h3><ul>
<li><p>主机数据更新后根据配置和策略，自动同步到备机的master&#x2F;slaver机制，Master以写为主，slave以读为主</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m29.jpg"></p>
</li>
<li><p>当从服务器宕机之后，重启从服务需要重新设置主从关系，设置完毕之后能获取到主服务器上的所有数据</p>
</li>
<li><p>当主服务器宕机之后，重启之后主从关系依旧存在，不需要重新设置</p>
</li>
</ul>
<h3 id="9-2-复制原理"><a href="#9-2-复制原理" class="headerlink" title="9.2 复制原理"></a>9.2 复制原理</h3><ol>
<li><p>Slave启动成功连接到master后会发送一个sync命令</p>
</li>
<li><p>主服务器接到从服务器发送过来的同步消息，把主服务器数据进行持久化，rdb文件，把rdb文件发送从服务器，从服务器拿到rdb文件进行读取</p>
</li>
<li><p>每次主服务器进行写操作之后，和从服务器进行数据同步</p>
</li>
<li><p>全量复制：而slave服务再接收到数据库文件数据后，将其存盘并加载到内存中</p>
</li>
<li><p>增量复制：Master继续将新的所有收集到的修改命令一次传给slave，完成同步</p>
</li>
<li><p>但是只要是重新连接master，一次完全同步(增量复制)将被自动执行</p>
</li>
</ol>
<h3 id="9-3-薪火相传"><a href="#9-3-薪火相传" class="headerlink" title="9.3 薪火相传"></a>9.3 薪火相传</h3><p>上一个Slave可以是下一个slave的Master，Slave同样可以接受其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master，可以有效减轻master的写压力，去中心化降低风险。缺陷：一旦某个slave宕机，后面的slave都无法备份</p>
<h3 id="9-4-反客为主"><a href="#9-4-反客为主" class="headerlink" title="9.4 反客为主"></a>9.4 反客为主</h3><p>当一个master宕机后，后面的slave可以立刻升级为master，其后面的slave不用做任何修改，用<code>slave no one</code>将从机变为主机</p>
<h3 id="9-5-哨兵模式"><a href="#9-5-哨兵模式" class="headerlink" title="9.5 哨兵模式"></a>9.5 哨兵模式</h3><ol>
<li><p>简介</p>
<p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m30.jpg"></p>
</li>
<li><p>使用步骤</p>
<ul>
<li><p>设置一主二仆模式,6379带着6380，6381</p>
</li>
<li><p>自定义的&#x2F;myredis目录下新建sentinel.conf文件</p>
</li>
<li><p>配置哨兵，填写内容</p>
<p><code>sentinel monltor mymaster 127.0.0.1 6379 1</code></p>
<p>其中mymaster为监控对象起的服务器名称，1为至少有多少个哨兵同意切换</p>
</li>
<li><p>启动哨兵</p>
<p><code>/usr/local/bin</code>执行<code>redis-sentinel /myredis/sentinel.conf</code></p>
</li>
<li><p>当主机挂掉，从机根据优先级别选举产生新的主机，原主机重启后会变为从机。选举条件依次为：</p>
<ul>
<li><p>选择优先级靠前的，优先级在redis.cof中默认:slave-priority 100，值越小优先级越高</p>
</li>
<li><p>选择偏移量最大的，偏移量是指获得原主机数据最全的</p>
</li>
<li><p>选择runid最小的从服务，每个redis实例启动后都会随机生成一个40位的runid</p>
</li>
</ul>
<p>挑选出新主服务之后<code>sentinel</code>向原主服务的从服务发送<code>slaveof</code>新主服务的命令，复制新master。当已经下线的服务重新上线时， <code>sentinel</code>会向其发送<code>slaveof</code>命令，让其称为新主的从</p>
</li>
</ul>
</li>
<li><p>复制延时</p>
<p>由于所有的写操作都是现在Master上操作，然后同步更新到slave上，所以从Master同步到Slave机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave机器数量的增加也会使这个问题更加严重</p>
</li>
</ol>
<h2 id="10-Redis集群"><a href="#10-Redis集群" class="headerlink" title="10. Redis集群"></a>10. Redis集群</h2><h3 id="10-1-什么是集群"><a href="#10-1-什么是集群" class="headerlink" title="10.1 什么是集群"></a>10.1 什么是集群</h3><p>Redis集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数居的1&#x2F;N</p>
<p>Redis集群通过分区来提供一定程度的可用性：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求</p>
<h3 id="10-2-什么是slots"><a href="#10-2-什么是slots" class="headerlink" title="10.2 什么是slots"></a>10.2 什么是slots</h3><ul>
<li><p>一个redis集群包含16384个插槽，数据库中的每个键都属于这16384个插槽的其中一个</p>
</li>
<li><p>集群使用公式CRC16(key)%16384来计算键key属于哪个槽，其中CRC16(key)语句用于计算key的CRC16校验和</p>
</li>
<li><p>集群中的每个节点负责处理一部分插槽</p>
</li>
</ul>
<h3 id="10-3-在集群中录入、查询值"><a href="#10-3-在集群中录入、查询值" class="headerlink" title="10.3 在集群中录入、查询值"></a>10.3 在集群中录入、查询值</h3><ol>
<li><p>录入值</p>
<ul>
<li><p>在redis-cli每次录入、查询键值，redis都会计算出该key应该送往的插槽，如果不是该客户端对应服务器的插槽，redis会报错，并告知应该前往的redis实例地址和端口</p>
</li>
<li><p>不在一个slot下的键值，是不能使用mget、mset等多键操作的，可以通过{}来定义组的概念，从而使key中{}内相同内容的键值对应放到一个slot中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mset k1&#123;user&#125; v1 k2&#123;user&#125; v2</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查询值</p>
<ul>
<li><p><code>cluster getkeysinslot &lt;slot&gt;</code>：计算槽中有多少个key</p>
</li>
<li><p><code>cluster keyslot cust</code>：计算插槽的值</p>
</li>
<li><p><code>cluster getkeysinslot &lt;slot&gt;&lt;count&gt;</code>：返回count个槽中的键</p>
</li>
</ul>
</li>
</ol>
<h3 id="10-4-故障修复"><a href="#10-4-故障修复" class="headerlink" title="10.4 故障修复"></a>10.4 故障修复</h3><ol>
<li><p>主节点下线，15秒超时之后从节点自动升为主节点</p>
</li>
<li><p>主节点恢复后，则变为从节点</p>
</li>
<li><p>如果某一段插槽的主从全都挂掉，而<code>cluster-require-full-coverage</code>为yes，那么整个集群都挂掉。如果为no，那么该插槽数据全都不能使用，也无法存储</p>
</li>
</ol>
<h2 id="11-Redis应用问题解决"><a href="#11-Redis应用问题解决" class="headerlink" title="11. Redis应用问题解决"></a>11. Redis应用问题解决</h2><h3 id="11-1-缓存穿透"><a href="#11-1-缓存穿透" class="headerlink" title="11.1 缓存穿透"></a>11.1 缓存穿透</h3><ol>
<li><p>redis查询不到，redis的命中率降低，每次都到数据库查询，但是数据库也没有，造成应用服务器压力变大</p>
</li>
<li><p>出现很多非正常的url访问</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m31.jpg"></p>
</li>
<li><p>解决办法</p>
<ol>
<li><p>对空值缓存：如果一个查询返回的数据为空，我们仍然将这个空结果(null)进行缓存,设置空结果的过期时间会很短，最长不超过五分钟</p>
</li>
<li><p>设置可访问的名单：使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问</p>
</li>
<li><p>采用布隆过滤器：它实际上是一个很长的二进制向量(位图)和一系列随机映射函数(哈希函数)。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都圆圆超过一般的算法，缺点是有一定的误识别率和删除困难。将所有可能存在的哈希到一个足够大的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力</p>
</li>
<li><p>进行实时监控：当发现Redis的命中率开始急速下降，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p>
</li>
</ol>
</li>
</ol>
<h3 id="11-2-缓存击穿"><a href="#11-2-缓存击穿" class="headerlink" title="11.2 缓存击穿"></a>11.2 缓存击穿</h3><ol>
<li><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m32.jpg"></p>
</li>
<li><p>解决办法</p>
<ol>
<li><p>预先设置热门数据：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p>
</li>
<li><p>实时调整：现场监控哪些数据热门，实时调成key的过期时长</p>
</li>
<li><p>使用锁</p>
<ul>
<li><p>在缓存失效的时候(判断拿出来的值为空)，不是立即去load db</p>
</li>
<li><p>先使用缓存工具的某些带成功操作返回值的操作去set一个mutex key</p>
</li>
<li><p>当操作返回成功时，再进行load db操作，并回设缓存，最后删除mutex key</p>
</li>
<li><p>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试get缓存的方法</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m33.jpg"></p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="11-3-缓存雪崩"><a href="#11-3-缓存雪崩" class="headerlink" title="11.3 缓存雪崩"></a>11.3 缓存雪崩</h3><ol>
<li><p>在极少时间段，查询大量key的集中过期情况。缓存击穿与缓存雪崩的区别在于是否针对很多key缓存，前者时某一个key</p>
</li>
<li><p>解决办法</p>
<ol>
<li><p>构建多级缓存架构：nginx缓存+redis缓存+其他缓存等</p>
</li>
<li><p>使用锁或队列：用加锁或者队列的方式保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，不适用高并发的情况</p>
</li>
<li><p>设置过期标志更新缓存：记录缓存数据是否过期，如果过期会触发通知另外的线程在后台去更新实际key的缓存</p>
</li>
<li><p>将缓存失效时间分散开：比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效事件</p>
</li>
</ol>
</li>
</ol>
<h2 id="12-分布式锁"><a href="#12-分布式锁" class="headerlink" title="12. 分布式锁"></a>12. 分布式锁</h2><h3 id="12-1-问题描述"><a href="#12-1-问题描述" class="headerlink" title="12.1 问题描述"></a>12.1 问题描述</h3><ol>
<li><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多进程、多线程并且分布在不同的机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的java api并不能提供分布式锁的能力，为了解决这个问题就要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题(<strong>加的锁对所有的机器都有效</strong>)</p>
</li>
<li><p>分布式锁主流的实现方案：</p>
<ul>
<li><p>基于数据库实现分布式锁</p>
</li>
<li><p>基于缓存(Redis等)</p>
</li>
<li><p>基于Zookeeper</p>
</li>
</ul>
</li>
<li><p>每一种分布式锁都有各自的优缺点</p>
<ol>
<li><p>性能：redis最高</p>
</li>
<li><p>可靠性：zookeeper最高</p>
</li>
</ol>
</li>
</ol>
<h3 id="12-2-使用redis实现分布式锁"><a href="#12-2-使用redis实现分布式锁" class="headerlink" title="12.2 使用redis实现分布式锁"></a>12.2 使用redis实现分布式锁</h3><ol>
<li><p>通过<code>setnx</code>上锁，通过<code>del</code>释放锁。锁一直没有释放，设置key过期时间，自动释放。上锁之后突然出现异常，无法设置过期时间，所以需要上锁的时候同时设置过期时间</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m34.jpg"></p>
</li>
<li><p>问题一</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m35.jpg"></p>
<ul>
<li>a因为卡顿没有操作完，锁到期了自动释放，然后b抢到了锁，此时a有完成操作，手动释放了b的锁</li>
</ul>
<p>解决办法</p>
<ol>
<li><p>第一步uuid表示不同的操作set lock uuid nx ex 10</p>
</li>
<li><p>第二步释放锁的时候，首先判断当前uuid和要释放锁uuid是否一样</p>
</li>
</ol>
</li>
<li><p>问题二：没有原子性</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/mysql/m36.jpg"></p>
<p>解决办法：lua脚本</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>曝光</title>
    <url>/2023/12/10/%E6%91%84%E5%BD%B1%E4%B9%8B%E6%9B%9D%E5%85%89/</url>
    <content><![CDATA[<h1 id="曝光"><a href="#曝光" class="headerlink" title="曝光"></a>曝光</h1><h2 id="1-何为正确曝光"><a href="#1-何为正确曝光" class="headerlink" title="1. 何为正确曝光"></a>1. 何为正确曝光</h2><p>两大评价标准</p>
<ol>
<li><p>主观感受</p>
</li>
<li><p>直方图</p>
</li>
</ol>
<h2 id="2-主观感受判断标准"><a href="#2-主观感受判断标准" class="headerlink" title="2. 主观感受判断标准"></a>2. 主观感受判断标准</h2><ol>
<li><p>主体元素正确曝光:确保拍摄主体正确曝光，其余元素过曝可以接受</p>
</li>
<li><p>场景的观感还原</p>
</li>
<li><p>暗部不死黑，亮部不死白</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji1.jpg"></p>
</li>
</ol>
<h2 id="3-曝光三要素"><a href="#3-曝光三要素" class="headerlink" title="3. 曝光三要素"></a>3. 曝光三要素</h2><p>3.1 三要素：光圈、快门、感光度(ISO)</p>
<p>3.2 光圈(Aperture)</p>
<ul>
<li><p>光圈F值&#x3D;焦距&#x2F;通光孔径</p>
</li>
<li><p>大光圈(F值小)：小景深(清晰的单位很小)、进光量更多、背景虚化</p>
</li>
<li><p>小光圈(F值大)：大景深(远近都清晰)、进光量更少、远近都清晰</p>
</li>
</ul>
<p>3.3 快门(Shutter Speed)</p>
<ul>
<li><p>值大：长曝光、进光量更多、记录轨迹</p>
</li>
<li><p>值小：断曝光、进光量更少、凝固瞬间</p>
</li>
</ul>
<p>3.4 感光度(ISO)</p>
<ul>
<li><p>值小：对光线不敏感、明亮场景使用、高画质</p>
</li>
<li><p>值大：对光线敏感、昏暗场景使用、低画质</p>
</li>
</ul>
<p>3.5 三者关系</p>
<ul>
<li><p>曝光互易率：可以通过调节三者的参数，使获得相同的曝光水平</p>
</li>
<li><p>光圈相邻参数之间是根号两倍的关系，每差一档光圈，相当于差两档亮度</p>
</li>
<li><p>快门相邻参数之间是两倍关系，每一档快门也是差了两档的亮度</p>
</li>
<li><p>ISO之间也是两倍关系，每差一档感光度也是差了两档亮度</p>
</li>
<li><p>总结：某一个参数向一个方向调了n档，则另一个参数，向另外一个方向去调n档可保持曝光不变</p>
</li>
</ul>
<h2 id="4-影调"><a href="#4-影调" class="headerlink" title="4. 影调"></a>4. 影调</h2><ol>
<li><p>何为影调</p>
<p>画面中明暗的艺术化氛围化的体现</p>
</li>
<li><p>影调分类</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji9.jpg"></p>
<p>低调又可以分为三种</p>
<ul>
<li><p>低短调</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji10.jpg"></p>
</li>
<li><p>低中调</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji11.jpg"></p>
</li>
<li><p>低长调</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji12.jpg"></p>
</li>
</ul>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji13.jpg"></p>
</li>
<li><p>影调量化</p>
<ul>
<li><p>直方图<img src="C:\Users\AIERXUAN\AppData\Roaming\marktext\images\2023-12-10-21-13-01-image.png"></p>
<ul>
<li><p>低调：主要像素集中在左侧</p>
</li>
<li><p>中间调：主要像素集中在中间</p>
</li>
<li><p>高调：主要像素集中在右侧</p>
</li>
</ul>
</li>
<li><p>直方图判断曝光</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji15.jpg"></p>
</li>
</ul>
</li>
</ol>
<h2 id="5-最佳曝光方式"><a href="#5-最佳曝光方式" class="headerlink" title="5. 最佳曝光方式"></a>5. 最佳曝光方式</h2><ol>
<li><p>向右曝光：<strong>画面直方图</strong>的右边尽可能贴近右边缘，但是不被切断。</p>
<p>好处：前期拍摄记录更多画面细节，以便后期画面噪点更少</p>
<p><img src="https://picture2-1310712259.cos.ap-nanjing.myqcloud.com/xiangji/xiangji16.jpg"></p>
</li>
</ol>
<h2 id="6-大光比处理"><a href="#6-大光比处理" class="headerlink" title="6. 大光比处理"></a>6. 大光比处理</h2><ol>
<li><p>何为大光比</p>
<ul>
<li><p>明暗反差大(最亮与最暗)，容易出现过曝欠曝情况</p>
</li>
<li><p>直方图体现：暗部和亮部有大量的像素堆积，中间凹进去，两头突出</p>
</li>
</ul>
</li>
<li><p>场景</p>
<p>日出、日落、夜晚城市灯光…</p>
</li>
<li><p>应对方式</p>
<ul>
<li><p>曝光合成(包围曝光、HDR)</p>
<ul>
<li>原理：在不同的曝光范围内拍摄多张，让相机宽容度覆盖不同的动态范围，后期合成</li>
</ul>
</li>
<li><p>前期欠曝、后期提亮</p>
</li>
<li><p>人像可进行补光</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/2023/12/17/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>是JDK8中的一个语法糖。可以<strong>对某些匿名内部类</strong>的写法进行简化。我们不用关注是什么对象，而是更加关注对数据进行了什么操作。</p>
<h3 id="1-2-基本格式"><a href="#1-2-基本格式" class="headerlink" title="1.2 基本格式"></a>1.2 基本格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(参数列表) -&gt; &#123;代码&#125;</span><br></pre></td></tr></table></figure>

<p>例:</p>
<p>创建线程，匿名内部类的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Thread(new Runnable()&#123;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;111&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<p>  使用Lambda的写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Thread(() -&gt; &#123;</span><br><span class="line">    System.out.println(&quot;1111&quot;);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h3 id="1-3-省略规则"><a href="#1-3-省略规则" class="headerlink" title="1.3 省略规则"></a>1.3 省略规则</h3><ul>
<li><p>参数类型可以省略</p>
</li>
<li><p>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略</p>
</li>
<li><p>方法只有一个参数时小括号可以省略</p>
</li>
</ul>
<h2 id="2-Stream流"><a href="#2-Stream流" class="headerlink" title="2. Stream流"></a>2. Stream流</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Stream使用的是函数式编程模式，可以被用来对集合或者数组进行链状流式的操作。</p>
<h3 id="2-2-案例数据准备"><a href="#2-2-案例数据准备" class="headerlink" title="2.2 案例数据准备"></a>2.2 案例数据准备</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; books;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Author&gt; <span class="title function_">getAuthors</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">1L</span>,<span class="string">&quot;1&quot;</span>,<span class="number">11</span>,<span class="string">&quot;111&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">2L</span>,<span class="string">&quot;2&quot;</span>,<span class="number">22</span>,<span class="string">&quot;222&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">3L</span>,<span class="string">&quot;3&quot;</span>,<span class="number">33</span>,<span class="string">&quot;333&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Author</span> <span class="variable">author4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Author</span>(<span class="number">4L</span>,<span class="string">&quot;4&quot;</span>,<span class="number">44</span>,<span class="string">&quot;444&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Book&gt; books1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Book&gt; books2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Book&gt; books3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    books1.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1L</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1,1&quot;</span>,<span class="number">11</span>,<span class="string">&quot;11&quot;</span>));</span><br><span class="line">    books1.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2L</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;2,2&quot;</span>,<span class="number">22</span>,<span class="string">&quot;22&quot;</span>));</span><br><span class="line"></span><br><span class="line">    books2.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">3L</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="number">33</span>,<span class="string">&quot;33&quot;</span>));</span><br><span class="line">    books2.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">3L</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="number">44</span>,<span class="string">&quot;44&quot;</span>));</span><br><span class="line">    books2.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">4L</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="number">55</span>,<span class="string">&quot;55&quot;</span>));</span><br><span class="line"></span><br><span class="line">    books3.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">5L</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="number">55</span>,<span class="string">&quot;55&quot;</span>));</span><br><span class="line">    books3.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">6L</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="number">55</span>,<span class="string">&quot;55&quot;</span>));</span><br><span class="line">    books3.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">6L</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="number">55</span>,<span class="string">&quot;55&quot;</span>));</span><br><span class="line"></span><br><span class="line">    author.setBooks(books1);</span><br><span class="line">    author2.setBooks(books2);</span><br><span class="line">    author3.setBooks(books3);</span><br><span class="line">    author4.setBooks(books4);</span><br><span class="line"></span><br><span class="line">    List&lt;Author&gt; authorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(author,author2,author3,author4));</span><br><span class="line">    <span class="keyword">return</span> authorList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-案例"><a href="#2-3-案例" class="headerlink" title="2.3 案例"></a>2.3 案例</h3><ol>
<li><p>需求</p>
<p>调用<code> getAuthors</code>方法获取到作家的集合，需要打印所有年龄小于18的作家的名字，并且需要去重</p>
</li>
<li><p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()<span class="comment">//去重</span></span><br><span class="line">        .filter(author -&gt; author.getAge() &lt; <span class="number">18</span>)<span class="comment">//筛选条件</span></span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName());<span class="comment">//遍历打印名字</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-4-常用操作"><a href="#2-4-常用操作" class="headerlink" title="2.4 常用操作"></a>2.4 常用操作</h3><h4 id="2-4-1-创建流"><a href="#2-4-1-创建流" class="headerlink" title="2.4.1 创建流"></a>2.4.1 创建流</h4><ul>
<li><p>单列结合：集合对象.stream()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors;</span><br><span class="line">Stream&lt;Author&gt; stream = authors.stream();</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组：<code>Arrays.stream(数组)</code>或者使用<code>Stream.of</code>来创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">Stream&lt;Integer&gt; stream = Arrays.stream(arr);</span><br><span class="line">Stream&lt;Integer&gt; stream2 = Stream.of(arr);</span><br></pre></td></tr></table></figure>
</li>
<li><p>双列集合：转换为单列集合后再创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="number">2</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; stream = map.entrySet().stream();</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-4-2-中间操作"><a href="#2-4-2-中间操作" class="headerlink" title="2.4.2 中间操作"></a>2.4.2 中间操作</h4><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><ul>
<li><p><code>function</code>：可以对流中的元素进行条件过滤，符合条件的才能继续留在流中</p>
</li>
<li><p>例子：打印所有姓名长度大于1的作家的姓名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .filter(author -&gt; author.getName().length() &gt; <span class="number">1</span>)</span><br><span class="line">        .foreach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><ul>
<li><p><code>function</code>：对流中的元素进行计算或转换</p>
</li>
<li><p>例子：打印所有作家的姓名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .forEach(name -&gt; System.out.println(name));</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><ul>
<li><p><code>function</code>：去除流中的重复元素</p>
</li>
<li><p>例如：打印所有作家的姓名，并且要求其中不能有重复的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName));</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明：<code>distinct</code>方法依赖<code>Object</code>的<code>equals</code>方法来判断是否是相同的对象，所以需要重写<code>equals</code></p>
</li>
</ul>
<h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><ul>
<li><p><code>function</code>：对流中的元素进行排序</p>
</li>
<li><p>例子：对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted((<span class="number">01</span>,<span class="number">02</span>) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明：调用<code>sorted</code>方法，流中的元素需要实现<code>Comparable</code></p>
</li>
</ul>
<h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><ul>
<li><p><code>function</code>：设置流的最大长度，超出部分将被抛弃</p>
</li>
<li><p>例子：对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素，然后打印其中年龄最大的两个作家的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted(<span class="number">01</span>,<span class="number">02</span>) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">        .limit(<span class="number">2</span>)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><ul>
<li><p><code>function</code>：跳过流中的前n个元素，返回剩下的元素</p>
</li>
<li><p>例子：打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .sorted(<span class="number">01</span>,<span class="number">02</span>) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">        .skip(n)</span><br><span class="line">        .forEach(author -&gt; System.out.println(author.getName()));</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><ul>
<li><p><code>function</code>：<code>map</code>只能把一个对象转换成另一个对象来作为流中的元素，<code>flatMap</code>可以把一个对象转换成多个对象作为流中的元素</p>
</li>
<li><p>例子一：打印所有书籍名字，要求对去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .flatMap(author -&gt; author.getBooks().stream())<span class="comment">//获取每个author中的books，同时转换为流</span></span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(book -&gt; System.out.println(book.getName()));</span><br></pre></td></tr></table></figure>
</li>
<li><p>例二：打印所有数据的所有分类，对分类进行去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">        .distict()</span><br><span class="line">        .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class="string">&quot;.&quot;</span>))<span class="comment">//一个book可能对应多个分类</span></span><br><span class="line">        .distinct()</span><br><span class="line">        .forEach(category -&gt; System.out.println(category));</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-4-3-终结操作"><a href="#2-4-3-终结操作" class="headerlink" title="2.4.3 终结操作"></a>2.4.3 终结操作</h4><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h5><ul>
<li><p><code>function</code>：对流中的元素进行遍历操作</p>
</li>
<li><p>例子：输出所有作家的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">suthors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .forEach(name -&gt; System.out.println(name));</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><ul>
<li><p><code>function</code>：获取当前流中元素的个数</p>
</li>
<li><p>例子：打印作家所出书籍的数目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> suthors.stream()</span><br><span class="line">        .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">        .distinct()</span><br><span class="line">        .count();</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="max-min"><a href="#max-min" class="headerlink" title="max&amp;min"></a>max&amp;min</h5><ul>
<li><p><code>function</code>：用来求流中的最值</p>
</li>
<li><p>例子：分别获取作家所出书籍的最高分和最低分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Optional&lt;Integer&gt; num = suthors.stream()</span><br><span class="line">                    .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">                    .map(book -&gt; book.getScore())</span><br><span class="line">                    .max((o1,o2) -&gt; o2 - o1);       </span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h5><ul>
<li><p><code>function</code>:将当前流转换成一个集合</p>
</li>
<li><p>例子:</p>
<ol>
<li><p>获取一个存放所有作者名字的list集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">List&lt;String&gt; list = authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .collect(Collectors.toList())</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取一个所有书名的<code>set</code>集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Set&lt;String&gt; set = authors.stream()</span><br><span class="line">        .flatMap(author -&gt; author.getBooks().stream())</span><br><span class="line">        .collect(Collectors.toSet())</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取一个<code>Map</code>集合，<code>map</code>的<code>key</code>为作者名，<code>value</code>为<code>List</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Map&lt;String,List&lt;Book&gt;&gt; map = authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .collect(Collectors.toMap(author.getName(),author.getBooks()))</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h5 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h5><h6 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h6><ul>
<li><p><code>function</code>：用来判断是否有任意符合匹配条件的元素，结果为<code>boolean</code>类型</p>
</li>
<li><p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">        .anyMatch(author -&gt; author.getAge() &gt; <span class="number">19</span>) </span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h6><ul>
<li><p><code>function</code>：可以用来判断是否都符合匹配的条件，结果为boolean类型，如果都符合结果为<code>true</code></p>
</li>
<li><p>例子：判断是否所有的作家都是成年人</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">        .allMatch(author -&gt; author.getAge() &gt;= <span class="number">18</span>) </span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h6><ul>
<li><p><code>function</code>：判断流中的元素是否都不符合匹配条件，如果都不符合结果为<code>true</code></p>
</li>
<li><p>例子：判断作家是否都没有超过100岁的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">        .noneMatch(author -&gt; author.getAge() &gt;= <span class="number">100</span>) </span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h6><ul>
<li><p><code>function</code>：获取流中的任意一个元素，无法保证获取的一定是流中的第一个元素</p>
</li>
<li><p>例子：获取任意一个大于18的作家，如果存在就输出他的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Optional&lt;Author&gt; res = authors.stream()</span><br><span class="line">        .filter(author -&gt; author.getAge() &gt; <span class="number">18</span>)</span><br><span class="line">        .findAny() </span><br></pre></td></tr></table></figure></li>
</ul>
<h6 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h6><ul>
<li><p><code>function</code>：获取流中第一个元素</p>
</li>
<li><p>例子：获取一个年龄最小的作家，并输出他的姓名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Optional&lt;Author&gt; res = authors.stream()</span><br><span class="line">        .sorted((o1,o2) -&gt; o1.getAge() - o2.getAge())</span><br><span class="line">        .findFirst()</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5><ul>
<li><p><code>function</code>：对流中的数据按照指定制定的计算方式计算出一个结果。<code>reduce</code>会把<code>stream</code>中元素组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和在初始化值的基础上进行计算，计算的结果再和后面的元素计算。</p>
<p>内部计算方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">T</span> <span class="variable">res</span> <span class="operator">=</span> identity;<span class="comment">//初始值</span></span><br><span class="line"><span class="keyword">for</span>(T element : <span class="built_in">this</span> stream)</span><br><span class="line">    res = accumulator.apply(res,element);</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例子：</p>
<ol>
<li><p>使用<code>reduce</code>求所有作者的年龄和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> authors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .reduce(<span class="number">0</span>,(res,age) -&gt; res + age)</span><br><span class="line"><span class="comment">//0代表初始值</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<ol start="2">
<li><p>使用<code>reduce</code> 求所有作者中年龄最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> athors.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .map(author -&gt; author.getAge())</span><br><span class="line">        .reduce(Integer.MIN_VALUE,(res,age) -&gt; res&gt;age ? RES : AGE)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h4><ol>
<li><p>惰性求值(如果没有终结操作，中间操作不会得到执行)</p>
</li>
<li><p>流是一次性的，一旦经过一个终结操作之后，这个流不能再被使用</p>
</li>
<li><p>不会影响原始的数据</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>方法引用</title>
    <url>/2023/12/23/%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>        在使用<code>lambda</code>时，如果方法体中只有一个方法的调用，可以使用方法引用进一步简化代码</p>
<h2 id="2-推荐用法"><a href="#2-推荐用法" class="headerlink" title="2. 推荐用法"></a>2. 推荐用法</h2><p>        在写完<code>lambda</code>方法时发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否能够转换成方法引用即可。</p>
<h2 id="3-基本格式"><a href="#3-基本格式" class="headerlink" title="3. 基本格式"></a>3. 基本格式</h2><p>        类名或者对象名::方法名</p>
<h2 id="4-语法详解"><a href="#4-语法详解" class="headerlink" title="4. 语法详解"></a>4. 语法详解</h2><h3 id="4-1-引用静态方法"><a href="#4-1-引用静态方法" class="headerlink" title="4.1 引用静态方法"></a>4.1 引用静态方法</h3><ul>
<li><p>其实就是引用类的静态方法</p>
</li>
<li><p>格式：类名::方法名</p>
</li>
<li><p>使用前提：在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且<strong>这行代码调用了某个类的静态方法</strong>，并且我们把要重写的<strong>抽象方法中的所有的参数都按照顺序传入了这个静态方法</strong></p>
</li>
<li><p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line">author.map(author -&gt; author.getAge())</span><br><span class="line">       .map(age -&gt; String.valueOf(age));</span><br></pre></td></tr></table></figure>

<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">author.map(author -&gt; author.getAge())</span><br><span class="line">       .map(String::valueOf);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-引用对象的实例方法"><a href="#4-2-引用对象的实例方法" class="headerlink" title="4.2 引用对象的实例方法"></a>4.2 引用对象的实例方法</h3><ul>
<li><p>格式：对象名::方法名</p>
</li>
<li><p>使用前提：在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个对象的成员方法</strong>，并且把要<strong>重写的抽象方法中所有参数都按照顺序传入了这个成员方法中</strong>，这时候可以引用对象的实例方法</p>
</li>
<li><p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">Stream&lt;Author&gt; authorStream = authors.stream();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">authorStream.map(author -&gt; author.getName())</span><br><span class="line">            .forEach(name -&gt; sb.append(name));</span><br></pre></td></tr></table></figure>

<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">authorStream.map(author -&gt; author.getName())</span><br><span class="line">            .forEach(sb::append);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3-引用类的实例方法"><a href="#4-3-引用类的实例方法" class="headerlink" title="4.3 引用类的实例方法"></a>4.3 引用类的实例方法</h3><ul>
<li><p>格式：类名::方法名</p>
</li>
<li><p>使用前提：在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码<strong>调用了第一个参数的成员方法</strong>，并且<strong>重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候可以引用类的实例方法</p>
</li>
</ul>
<h3 id="4-4-构造器引用"><a href="#4-4-构造器引用" class="headerlink" title="4.4 构造器引用"></a>4.4 构造器引用</h3><p>        如果方法体中的一行代码是构造器的话可以使用构造器引用</p>
<ul>
<li><p>格式：类名::new</p>
</li>
<li><p>使用前提：在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且把<strong>要重写的抽象方法中的所有参数都按照顺序传入了这个构造方法中</strong>，这时候就可以使用引用构造</p>
</li>
<li><p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(author -&gt; author.getName())</span><br><span class="line">        .map(name -&gt; <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(name))</span><br><span class="line">        .map(sb -&gt; sb.append(<span class="string">&quot;三更&quot;</span>).toString())</span><br><span class="line">        .forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure>

<p>优化后:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Author&gt; authors = getAuthors();</span><br><span class="line">authors.stream()</span><br><span class="line">        .map(Author::getName)</span><br><span class="line">        .map(StringBuilder::<span class="keyword">new</span>)</span><br><span class="line">        .map(sb -&gt; sb.append(<span class="string">&quot;三更&quot;</span>).toString())</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>对象转换</title>
    <url>/2024/01/09/%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="对象转换"><a href="#对象转换" class="headerlink" title="对象转换"></a>对象转换</h1><h2 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1. 问题引入"></a>1. 问题引入</h2><p>        最近实习中遇到一个问题：两个不同的类A和B中分别有实体类EntityA和EntityB，他们需要调用同一个方法C来实现某个功能，其中EntityA和EntityB中都有C中需要用到的字段。所以现在需要将其中一个对象转化另一个，这样才能都调用方法C。</p>
<h2 id="2-问题解决"><a href="#2-问题解决" class="headerlink" title="2. 问题解决"></a>2. 问题解决</h2><h3 id="2-1-同名字段复制"><a href="#2-1-同名字段复制" class="headerlink" title="2.1 同名字段复制"></a>2.1 同名字段复制</h3><p>解决办法：通过泛型、反射等方式，获得一个对象的属性值然后赋值给另一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,S&gt; T <span class="title function_">convert</span><span class="params">(T target,S source)</span> &#123;</span><br><span class="line">        Field[] declaredFields = getAllFields(target);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; declaredFields.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">targetField</span> <span class="operator">=</span> declaredFields[i];</span><br><span class="line">                <span class="type">ExcludeConvert</span> <span class="variable">excludeConvert</span> <span class="operator">=</span> targetField.getAnnotation(ExcludeConvert.class);</span><br><span class="line">                <span class="keyword">if</span>(excludeConvert==<span class="literal">null</span>||!excludeConvert.value()) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">sourceField</span> <span class="operator">=</span> source.getClass().getDeclaredField(targetField.getName());</span><br><span class="line">                    <span class="keyword">if</span> (!sourceField.getName().equals(<span class="string">&quot;serialVersionUID&quot;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            targetField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            sourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> sourceField.get(source);</span><br><span class="line">                            <span class="keyword">if</span>(value!=<span class="literal">null</span>)&#123;</span><br><span class="line">                                targetField.set(target, value);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            targetField.setAccessible(<span class="literal">false</span>);</span><br><span class="line">                            sourceField.setAccessible(<span class="literal">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取类的所有属性，包括父类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Field[] getAllFields(Object object) &#123;</span><br><span class="line">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">    List&lt;Field&gt; fieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        fieldList.addAll(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(clazz.getDeclaredFields())));</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    Field[] fields = <span class="keyword">new</span> <span class="title class_">Field</span>[fieldList.size()];</span><br><span class="line">    fieldList.toArray(fields);</span><br><span class="line">    <span class="keyword">return</span> fields;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-指定字段复制"><a href="#2-2-指定字段复制" class="headerlink" title="2.2 指定字段复制"></a>2.2 指定字段复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String [] baseFields=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;id&quot;</span>,<span class="string">&quot;createUser&quot;</span>,<span class="string">&quot;updateUser&quot;</span>,<span class="string">&quot;createTime&quot;</span>,<span class="string">&quot;updateTime&quot;</span>,<span class="string">&quot;deleted&quot;</span>,<span class="string">&quot;serialVersionUID&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,S&gt; T <span class="title function_">convertWithoutBaseEntity</span><span class="params">(T target,S source)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; baseFieldSet = Arrays.stream(baseFields).collect(Collectors.toSet());</span><br><span class="line">        Field[] declaredFields = getAllFields(target);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; declaredFields.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">targetField</span> <span class="operator">=</span> declaredFields[i];</span><br><span class="line">                <span class="keyword">if</span>(baseFieldSet.contains(targetField.getName()))<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">ExcludeConvert</span> <span class="variable">excludeConvert</span> <span class="operator">=</span> targetField.getAnnotation(ExcludeConvert.class);</span><br><span class="line">                <span class="keyword">if</span>(excludeConvert==<span class="literal">null</span>||!excludeConvert.value()) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">sourceField</span> <span class="operator">=</span> source.getClass().getDeclaredField(targetField.getName());</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        targetField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        sourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> sourceField.get(source);</span><br><span class="line">                        <span class="keyword">if</span>(value!=<span class="literal">null</span>)&#123;</span><br><span class="line">                            targetField.set(target, value);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        targetField.setAccessible(<span class="literal">false</span>);</span><br><span class="line">                        sourceField.setAccessible(<span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Field[] getAllFields(Object object) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        List&lt;Field&gt; fieldList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            fieldList.addAll(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(clazz.getDeclaredFields())));</span><br><span class="line">            clazz = clazz.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] fields = <span class="keyword">new</span> <span class="title class_">Field</span>[fieldList.size()];</span><br><span class="line">        fieldList.toArray(fields);</span><br><span class="line">        <span class="keyword">return</span> fields;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>编程实战</tag>
      </tags>
  </entry>
</search>
